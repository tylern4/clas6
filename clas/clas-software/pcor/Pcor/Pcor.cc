#include <math.h>
#include <stdio.h>
#include <iostream>
#include "kinematics.h"

float GetBdl(int q,float p, float theta, float Itorus);

extern "C"{

  vector4_t DCpcor(vector4_t p4, int sector, int q, int runID);
  
  void dcpcor_(float *p3, int *sector, int *q, int *runid);
  
  float TAGRcor(float epho, float E0, int runID);
  
  void tagrcor_(float *epho, float *E0, int *runID);

  vector4_t DCeloss(vector4_t p4, int sector, int runID);

  void dceloss_(float *p4, int *sector, int *runid);

  vector4_t Pcor(vector4_t p4,int sector,int q, int runID);

  void pcor_(float *p4,int *sector,int *q,int *runid);
}

void tagrcor_(float *epho, float *E0, int *runID){
  float eg;
  eg = TAGRcor(*epho,*E0,*runID);
  *epho = eg;

}

void dcpcor_(float p3[3], int *sector, int *q,int *runid){

  vector4_t p4cor,p4m;
  p4m.space.x = p3[0];
  p4m.space.y = p3[1];
  p4m.space.z = p3[2];

  p4m.t = sqrt(p3[0]*p3[0] + p3[1]*p3[1] + p3[2]*p3[2]);

  p4cor = DCpcor(p4m,*sector,*q,*runid);

  p3[0] = p4cor.space.x;
  p3[1] = p4cor.space.y;
  p3[2] = p4cor.space.z;

}

void dceloss_(float *p4, int *sector, int *runid){

  vector4_t p4cor, p4m;
  p4m.space.x = p4[0];
  p4m.space.y = p4[1];
  p4m.space.z = p4[2];
  p4m.t = p4[3];

  p4cor = DCeloss(p4m, *sector, *runid);

  p4[0] = p4cor.space.x;
  p4[1] = p4cor.space.y;
  p4[2] = p4cor.space.z;
  p4[3] = p4cor.t;

}
  

void pcor_(float *p4,int *sector,int *q,int *runid){

  vector4_t p4cor,p4m;
  p4m.space.x = p4[0];
  p4m.space.y = p4[1];
  p4m.space.z = p4[2];
  p4m.t = p4[3];

  p4cor = Pcor(p4m,*sector,*q,*runid);

  p4[0] = p4cor.space.x;
  p4[1] = p4cor.space.y;
  p4[2] = p4cor.space.z;
  p4[3] = p4cor.t;

}
  
vector4_t DCpcor(vector4_t p4, int sector, int q, int runID){
  // applies momentum corrections to charged particles in CLAS
  // derived for the g1c and g11 run periods.
  // 
  // runID = 1  is g1c 3.1 GeV
  // runID = 2  is g1c 2.4 GeV
  // runID = 3  is g11 

  float Bdl,pm,px,py,pz,m,theta,phi,pcor,Itorus;
  vector4_t p4cor;
  int phibin,i,j;

  float apos[6][10],bpos[6][10],cpos[6][5],aneg[6][10],bneg[6][10],cneg[6][5];

  px = p4.space.x;
  py = p4.space.y;
  pz = p4.space.z;

  pm = sqrt(px*px + py*py + pz*pz);

  m = sqrt(p4.t*p4.t - pm*pm);
  theta = acos(pz/pm);
  phi = atan2(py,px);
 
  if((runID == 1)||(runID == 2)||(runID == 3)){
    Itorus = 1920.0;
  }

  Bdl = GetBdl(q,pm,theta,Itorus);

   if(Bdl == 0.0){
    return p4;
  }
  
  // phi bins work as (-25,-20) is bin 0, (-20,-15) is bin 1 ... (20,25) is 
  // bin 9
  // g1c parameters
  float anegg1c[6][10] = {{-4.48695,-3.74883,-2.79991,-2.34222,-0.853252,-0.319857,1.18798,1.27426,1.26359,1.04627},{-5.59945,-4.69647,-3.60574,-1.95416,-1.70949,-1.46655,-1.94510,-1.10805,-0.916925},{-0.768211,0.426845,-0.514684,-0.373486,-0.316727,-1.31495,-2.41803,-2.37492,-3.41833,-3.81785},{2.06511,3.20744,3.11262,2.91453,2.38069,2.09806,1.06336,0.534416,-0.595552,-1.01872},{-0.026820,0.262493,0.551601,0.8444471,-0.199171,0.367880,-0.101378,0.309209,-0.723196,-1.67610},{7.60884,7.88374,7.65248,4.41801,3.69671,1.40168,-1.39483,-2.30221,-3.67526,-6.23115}};

  float bnegg1c[6][10] = {{0.00123249,0.00139840,0.000347585,-0.000235993,-0.00212308,-0.00354623,-0.00603679,-0.00648359,-0.00676616,-0.00688433},{0.00142145,-0.000972792,-0.00254131,-0.00373451,-0.00662959,-0.00753426,-0.00840490,-0.00818177,-0.00989391,-0.0102452},{0.00462347,0.000592281,0.000335324,0.000418587,0.000175579,0.00133395,0.00229206,0.00178869,0.00175505,-0.00117766},{0.00548663,0.000849534,-0.000592270,-0.00115298,-0.00121905,-0.00185035,-0.00157293,-0.00211409,-0.00247801,-0.00433914},{0.00590055,0.00362922,0.00199951,0.000645485,0.000925869,-0.00112015,-0.00150359,-0.00327762,-0.00315296,-0.00377030},{0.00193828,-0.0028607,-0.00403091,-0.00142564,-0.00228100,-0.000719641,0.00100696,0.000337594,-0.000301571,0.000440365}};

  float cnegg1c[6][5] = {{15.5279,-55.9115,63.3995,-27.7406,4.13267},{4.66412,-25.7774,35.7890,-16.3311,2.48280},{-5.94786,40.3904,-75.7484,51.6833,-11.7097},{11.7423,-59.9989,87.9982,-46.8560,8.40381},{5.26789,-22.7650,28.1304,-12.3584,2.00945},{6.69683,-29.9385,34.1462,-12.3351,1.62178}};

  float aposg1c[6][10]  = {{3.08094,2.36445,4.84716,1.40996,1.56156,1.36493,0.899387,0.0397270,0.0320524,-0.00273913},{6.88902,7.65129,8.51941,8.07934,7.61976,7.09939,5.75420,4.88588,3.71089,2.04427},{0.4860347,1.28888,1.87322,1.39567,1.10670,0.745536,1.52524,-0.199171,0.169081,-1.57959},{-0.343763,-0.913237,-0.901479,-0.589175,0.602365,-0.0978728,0.618452,0.395592,1.14669,1.74365},{2.49902,2.76912,3.21036,1.87548,2.84367,1.33166,1.63741,-0.00560407,-0.246814,0.425038},{-7.52874,-5.35393,-6.44887,-4.71433,-4.21594,-3.30512,-1.87963,0.153624,0.196322,1.81755}};

  float bposg1c[6][10]  = {{-0.000256804,-0.000485507,-0.000214371,0.000185955,-0.000780743,-0.00117483,-0.00156018,-0.00154690,-0.00299285,-0.00662343},{-0.00136685,-0.00375091,-0.00572383,-0.00583996,-0.00632324,-0.00657127,-0.00602094,-0.00673949,-0.00719375,-0.00886251},{0.00330722,0.000436964,-0.00110605,-0.00202942,-0.00311298,-0.00423139,-0.00717785,-0.00703845,-0.00837910,-0.00821884},{0.00531096,0.00480925,0.00414197,0.00166822,-0.00120285,-0.00199835,-0.00461049,-0.00627153,-0.00915033,-0.0136073},{0.00180992,0.000569946,-0.000872512,-0.000377804,-0.00269726,-0.00224672,-0.00354342,-0.00258537,-0.00358758,-0.00793604},{0.00333987,0.00169962,0.00315866,0.000783018,0.000133044,-0.00100515,-0.00267094,-0.00293108,-0.00475378,-0.00699526}};

  float cposg1c[6][5] = {{2.45731,-5.51792,4.03292,-5.07528,2.40164},{-3.36646,11.9747,-9.59951,0.222401,1.54063},{-6.70395,17.7966,-13.8941,8.78835,-2.64496},{0.806461,6.91541,-21.3384,14.0092,-2.07642},{2.87240,-4.87925,-1.04696,3.29361,-0.5969616},{10.9124,-39.0490,50.8838,-31.3906,6.88078}};

  // g11 paramters
  /*
  float anegg11[6][10] = {{-0.788848,0.242965,0.641406,1.19110,0.562794,1.59381,0.995708,1.35695,0.137039,2.44742},{0.538395,2.00360,2.25455,2.09865,1.65117,1.69609,1.64130,1.38453,2.08025,1.69616},{3.09495,2.88530,1.45220,2.26271,1.73387,1.47291,0.962068,0.712382,0.0331737,0.443796},{0.774425,0.517334,-0.314780,1.45365,-0.323838,0.661571,0.424255,-0.2127579,-0.712028,-1.56615},{-1.07429,0.846112,0.816003,0.989221,0.893244,0.581363,-0.201127,0.218088,0.601374,0.189955},{-3.52684,-1.48139,-1.41117,-0.902015,0.122247,0.636525,-0.258981,-0.465584,-0.811696}};

  float bnegg11[6][10] = {{0.00271123,0.00161659,0.000863127,-0.000455341,0.0000948079,-0.00210447,-0.00250112,-0.00401191,-0.00362276,-0.00813964},{0.00534871,0.00129955,-0.000129040,-0.00132769,-0.00150498,-0.00342263,-0.00446044,-0.00541914,-0.00813574,-0.00971378},{0.00371233,-0.000721464,-0.000763185,-0.00280172,-0.00284504,-0.00327791,-0.00297258,-0.00316145,-0.00405985,-0.00849819},{0.00993798,0.00694487,0.00630432,0.00246508,0.00353106,0.000889788,-0.000263924,-0.00111380,-0.00267169,-0.0048054},{0.0119917,0.00727492,0.00602455,0.00405640,0.00327542,0.00256148,0.00241169,0.000247164,-0.00209136,-0.00401773},{0.00912703,0.00395413,0.00354643,0.00245428,0.00133852,-0.000770441,-0.00168595,-0.00177356,-0.00275856,-0.00527656}};
  */

  float anegg11[6][10] = {{-1.6091,0.818792,0.439432,1.10894,0.838792,1.6014,1.06079,1.12615,1.24347,2.66895},{0.349996,1.48196,2.15358,2.18105,1.64443,1.943,1.98589,1.53699,0.895769,1.71841},{3.26091,2.95842,3.28189,2.56472,1.42437,1.50059,0.236671,0.725497,-0.999549,-2.63028},{1.10777,1.02427,0.248443,1.28393,0.375599,0.403682,0.105292,-0.560135,-0.44024,-2.10103},{0.692803,0.351061,0.931901,1.29123,0.999553,0.787922,0.993993,1.05765,0.49666,-0.932436},{-3.57136,-4.01424,-0.879905,-0.836397,0.108473,0.0309988,-0.0198829,0.164664,-0.603391,-0.617623}};

  float bnegg11[6][10] = {{0.00371823,0.00053896,0.00116106,-0.000213164,-0.000246055,-0.00220694,-0.00265842,-0.0037805,-0.00508825,-0.0082208},{0.00518914,0.00186088,-0.000107035,-0.00172902,-0.00157732,-0.00373804,-0.00507562,-0.00583603,-0.00656981,-0.00942675},{0.00281608,-0.00153683,-0.00380858,-0.00349438,-0.00254275,-0.00301718,-0.00178674,-0.00295645,-0.00198886,-0.00394686},{0.00860855,0.00582061,0.00519261,0.00245737,0.00224545,0.00113795,0.000103366,-0.000779429,-0.00326732,-0.00449649},{0.0091361,0.00742235,0.00552345,0.00343746,0.00287218,0.00203128,0.000398059,-0.00135376,-0.00207727,-0.0028368},{0.00876837,0.0068039,0.00215317,0.00182596,0.000288703,-0.000675089,-0.00076437,-0.00213887,-0.00224298,-0.00540898}};


  float cnegg11[6][5] = {{0.00923652,-0.0383795,0.052935,-0.0289772,0.0054392},{0.00208796,-0.0149729,0.0279876,-0.0172235,0.00344257},{-0.00343555,0.0153051,-0.0197406,0.0107236,-0.00206156},{0.0233519,-0.0837698,0.108582,-0.0576487,0.0107344},{0.0144247,-0.0429693,0.0531296,-0.0269525,0.00479663},{-0.00836044,0.0179745,-0.0125077,0.00325319,-0.000167647}};


			 
    //  float cnegg11[6][5] = {{0.,0.,0.,0.,0.},{0.,0.,0.,0.,0.},{0.,0.,0.,0.,0.},{0.,0.,0.,0.,0.},{0.,0.,0.,0.,0.},{0.,0.,0.,0.,0.}};

  float aposg11[6][10] = {{-0.278725,-0.916796,-1.18124,-1.06398,-0.930682,-1.28981,-0.0503046,-1.9496,-0.766364,-1.44645},{0.477543,-0.811922,2.84761,-0.109877,0.197738,-0.309573,0.411972,0.465564,0.997314,0.429817},{0.199219,1.76495,0.288203,0.402335,-0.528731,0.309487,-0.935791,-0.583216,-1.40358,1.39084},{1.0606,-0.594619,-0.784836,-1.57762,-0.849194,-0.599059,-0.258879,-0.172832,-0.529385,0.184809},{-2.30083,-2.59514,-2.77728,-3.62669,-3.12909,-4.90128,-4.41743,-3.97822,-4.84297,0.777493},{0.228669,-0.961234,0.0427582,0.593979,1.69754,-1.47534,-1.02134,-1.74428,-3.06629,-3.05661}};

  float bposg11[6][10] = {{0.00369811,0.00353246,0.00291229,0.00235785,0.00147567,0.00118288,-0.00166257,0.000135891,-0.00260871,-0.0054274},{0.00211111,0.00218755,-0.00290808,-0.00106475,-0.00203968,-0.00226482,-0.00419122,-0.00576173,-0.00807072,-0.0104051},{0.00483108,0.000860455,0.00116564,-0.000315565,-0.000392086,-0.00328451,-0.00293042,-0.00533487,-0.00504999,-0.0117794},{0.00485607,0.00577452,0.00484955,0.00424695,0.00149577,-0.000229191,-0.00232317,-0.00405895,-0.00581787,-0.0105621},{0.00768688,0.00672344,0.00554154,0.0055594,0.00391339,0.00549797,0.00353423,0.00183178,0.00138806,-0.00827921},{0.00743215,0.0080931,0.0059342,0.00306919,-0.00105977,0.00244375,1.75776e-06,-0.000868764,-0.00189305,-0.00534146}};
  
  float cposg11[6][5] = {{0.00171747,-0.002382,-0.00370655,0.00554182,-0.00160488},{-0.00485778,0.0166006,-0.0183681,0.00802755,-0.00117364},{-0.00512286,0.0195187,-0.025171,0.0140391,-0.00280285},{0.00203428,-0.000726643,-0.00627144,0.0060592,-0.00152585},{0.0017256,-0.0039166,0.00208263,0.00116313,-0.000668373},{0.0073018,-0.0243452,0.0273632,-0.0125067,0.00209838}};
 
  if((runID == 1)||(runID == 2)){
    for(i = 0; i < 6; i++){
      for(j = 0; j < 10; j++){
	apos[i][j] = aposg1c[i][j];
	bpos[i][j] = bposg1c[i][j];
	if(j < 5){
	  cpos[i][j] = cposg1c[i][j];
	}
	aneg[i][j] = anegg1c[i][j];
	bneg[i][j] = bnegg1c[i][j];
	if(j < 5){
	  cneg[i][j] = cnegg1c[i][j];
	}
      }
    }
  }
  else if(runID == 3){
    for(i = 0; i < 6; i++){
      for(j = 0; j < 10; j++){
	apos[i][j] = aposg11[i][j];
	bpos[i][j] = bposg11[i][j];
	if(j < 5){
	  cpos[i][j] = cposg11[i][j];
	}
	aneg[i][j] = anegg11[i][j];
	bneg[i][j] = bnegg11[i][j];
	if(j < 5){
	  cneg[i][j] = cnegg11[i][j];
	}
      }
    }
  }

  if(sector < 4){
    phi -= (3.14159/3.0)*(sector - 1);
  }
  else{
    if(sector == 4){
      if(phi > 0){
	phi -= 3.14159;
      }
      else{
	phi += 3.14159;
      }
    }
    if(sector == 5){
      phi += (3.14159/3.0)*2.0;
    }
    if(sector == 6){
      phi += (3.14159/3.0);
    }
  }

  // convert phi to degrees
  phi *= 180.0/3.14159;
  
  if(phi >= 25.0){
    phibin = 9;
  }
  else{
    if(phi <= -25.0){
      phibin = 0;
    }
    else{
      phibin = (int)((25 + phi)/5);
    }
  }


  if(q < 0){
    pcor = pm + (pm*pm/Bdl)*(aneg[sector -1][phibin] + bneg[sector -1][phibin]*Bdl/pm + cneg[sector - 1][0] + cneg[sector -1][1]*theta + cneg[sector -1][2]*theta*theta + cneg[sector -1][3]*theta*theta*theta + cneg[sector -1][4]*theta*theta*theta*theta);    
  }
  else{
    if(q > 0){
      pcor = pm + (pm*pm/Bdl)*(apos[sector -1][phibin] + bpos[sector -1][phibin]*Bdl/pm + cpos[sector - 1][0] + cpos[sector -1][1]*theta + cpos[sector -1][2]*theta*theta + cpos[sector -1][3]*theta*theta*theta + cpos[sector -1][4]*theta*theta*theta*theta);
    }
  }
  p4cor.space.x = px*(pcor/pm);
  p4cor.space.y = py*(pcor/pm);
  p4cor.space.z = pz*(pcor/pm);
  p4cor.t = sqrt(pcor*pcor + m*m);

  return p4cor;

}


float GetBdl(int q, float p, float theta, float Itorus){
  // gets |integral(Bxdl)| for a track with p4 in field with Itorus

  float By,x,z,dpx,dpz,px,pz;
  int ix,iz,index,Niter;
  float Bdl,dBdl,dBdlx,dBdlz;
  float dx,dz,dl;
  float qc;

  Niter = 0;

  extern double Q[(int)1e6],Xmin,Zmin,Dx,Dz;
  extern int Nx,Ny;

  if((Dx == 0.0)||(Dz == 0.0)){
    printf("Warning!!!!! Data Error Dx || Dz==0\n");
    //    cout << "Warning!!!!! Data Error Dx || Dz==0" << endl; 
//    cout << "Warning!!!!! Data Error. It looks like InitPcor() has NOT been 
//n.  This function must be run once prior to using the g1cPcor function.
// Corrections will NOT be made." << endl;
    return 0.0;
  }
  
  Bdl = 0.0;
  qc = (float)q;
  x = 0.0;
  z = 0.0;
  dl = 20.0;
  /*
  px = p4.space.x;
  py = p4.space.y;
  pz = p4.space.z;
  */
  p *= (1.0E9)*(1.782E-36)*(3.0E8);
  px = p*sin(theta);
  pz = p*cos(theta);

  // convert p and q to standard units
  //  p *= (1.0E9)*(1.782E-36)*(3.0E8);
  qc *= (1.602E-19);

  while((z < 400.0)&&(z > -200.0)&&(x < 300.)&&(Niter < 100)){
    Niter++;

    dx = dl*px/p;
    dz = dl*pz/p;
    // calculate closest ix and iz
    ix = (int)((x - Xmin)/Dx);
    iz = (int)((z - Zmin)/Dz);
    index = iz*Nx*Ny*3 + Nx*3 + 3*ix;

    By = (Itorus/3860.0)*Q[index+1];

    dpx = qc*(-1.0*By*dz)*(0.01)*(0.1);
    dpz = qc*(dx*By)*(0.01)*(0.1);

    dBdlx = -1.0*By*dz;
    dBdlz = dx*By;

    dBdl = sqrt(dBdlx*dBdlx + dBdlz*dBdlz);

    Bdl += dBdl;

    px += dpx;
    pz += dpz;

    z += dz;
    x += dx;

  }

  return Bdl;

}

float TAGRcor(float epho, float E0, int runID){
  // beam offsets only calculated for 2.4 and 3.1 from g1c
  // runID = 1 is 3.115 from g1c
  // runID = 2 is 2.4 from g1c
  // runID = 3 is 4.016 from g11a
  // any other runID gets a beam offset of 0.0

  float eg = 0.0;
  float egdivE0 = 0.0;

  egdivE0 = epho/E0;

  if(runID == 1){
    // beam off by -0.2% or -6.23MeV(taken from mcc recorded energy)
    egdivE0 -= 0.002;
  }
  if(runID == 2){
    // beam off by -0.075% or -1.8MeV(needed to make correction match 3.1GeV)
    egdivE0 -= 0.00075;
  }
  if(runID == 3){
    // beam off by + 0.00444 MeV or 0.11% 
    // egdivE0 += 0.0011;
    /*
    if(epho > 2.8){
      eg = -0.264319 + 0.176451*epho - 0.0271662*epho*epho;
    }   
    else if(epho > 1.6){
      eg = -0.0592731 + 0.0586458*epho - 0.0113537*epho*epho;
    }
    else {
      eg = -0.0238095 + 0.0464447*epho - 0.0174077*epho*epho;
    }
    return eg + epho;
    */
    if(egdivE0 > 0.7){
      egdivE0 += -0.0467393 + 0.128306*egdivE0 - 0.08065*egdivE0*egdivE0;
    }
    else if(egdivE0 > 0.39){
      egdivE0 += -0.0155699 + 0.0620013*egdivE0 - 0.0504616*egdivE0*egdivE0;
    }
    else{
      egdivE0 += -0.00431233 + 0.0341800*egdivE0 - 0.0494074*egdivE0*egdivE0;
    }
    
    eg = egdivE0*E0;
    return eg;
  }


  if(egdivE0 < 0.401){
    egdivE0 += -0.00599597 + 0.0390912*egdivE0 - 0.0573218*egdivE0*egdivE0;
  }
  if((egdivE0 >= 0.401)&&(egdivE0 <= 0.674)){
    egdivE0 += -0.0181293 + 0.0675599*egdivE0 - 0.0541268*egdivE0*egdivE0;
  }
  if(egdivE0 > 0.674){
    egdivE0 += -0.0511162 + 0.138208*egdivE0 - 0.0867757*egdivE0*egdivE0;
  }

  eg = egdivE0*E0;

  return eg;

}

vector4_t DCeloss(vector4_t p4, int sector, int runId){
  //applies corrections for energy loss in the drift chambers
  //derived from the g1c run period.

  float px, py, pz,E, m, pm, pc, beta;
  vector4_t p4cor;

  px = p4.space.x;
  py = p4.space.y;
  pz = p4.space.z;
  E = p4.t; 

  float coefs[6][4]={{-.00116104, -.000176058, .00178656, -.000195306}, {-.00792481, .00718844, -.00112648, .000151199}, {-.0120301, .0110054, -.00218759, .000224847}, {.00531744, -.00878848, .00516855, -.000631009}, {-.0000316077, -.00289511, .00323581, -.000398962}, {.0116049, -.0159492, .00788174, -.000916976}};

  pm = sqrt(px*px + py*py + pz*pz);
  m = sqrt(E*E - pm*pm);
  beta = pm/E;
  if(runId == 3){
    float A[6] = {0.000283782,-0.0000510287,-0.00115573,0.00176822,-0.000773778,-0.00103668};
    float B[6] = {0.000165229,0.000170117,0.000393023,-0.000168584,0.000545137,0.000567781};

    pc = pm + A[sector-1]/beta + B[sector-1]/(beta*beta) -(A[sector-1]+B[sector-1]);
  }
  else{
    pc = pm + coefs[sector-1][0] + coefs[sector-1][1]/beta + coefs[sector-1][2]/(beta*beta) + coefs[sector-1][3]/(beta*beta*beta);
  }
  p4cor.space.x = px*(pc/pm);
  p4cor.space.y = py*(pc/pm);
  p4cor.space.z = pz*(pc/pm);
  p4cor.t = sqrt(pc*pc + m*m);

  return p4cor;
}

vector4_t Pcor(vector4_t p4, int sector, int q,int runID){
  // applies both the g1cPcor momentum corrections for drift chamber 
  // misalignments and field map problems and the g1cDCeloss corrections for
  // energy lost in the drift chambers

  vector4_t p4cor,p4cor1;

  p4cor1 = DCpcor(p4,sector,q,runID);
  p4cor = DCeloss(p4cor1,sector,runID);

  return p4cor;

}
