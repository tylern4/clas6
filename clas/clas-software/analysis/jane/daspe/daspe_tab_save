      SUBROUTINE DASPE_TAB(Ierr)
c
c_begin_doc
c  RCS ID string
c  $Id$
c
c  Documentation for subroutine DASPE_TAB
c
c  Purpose:
c  --------
c
c  Input Parameters:  (Name - Type - Meaning)
c  ----------------
c
c  Output Parameters:  (Name - Type - Meaning)
c  -----------------
c
c  Other routines:
c  -------------
c
c  Notes:
c  ------
c
c  Author:  S.Stepanyan   Created:  Wed Jun 23 17:16:39 EST 1999
c  -------
c
c  Major revisions:
c  ----------------
c     
c
c_end_doc
c
      IMPLICIT NONE
      SAVE
c
c_begin_inc
c  include files :
c  ---------------------
c BOS common block  uncomment the next line for BOS include file
#include "inpar.inc"
#include "cross_sec.inc"
#include "helicity.inc"
#include "daspetab.inc"
#include "fit_par.inc"
c_end_inc
c
c_begin_var
c  input/output variables:
c  -----------------------
      Integer Ierr
c
c  Local pre-defined variables:
c  ---------------------------
c  RCS information: 
      CHARACTER*132  CFILE, CREVIS, CSTATE, CDATE, CAUTHO, CRCSID
      PARAMETER (CFILE = '$RCSfile$')
      PARAMETER (CREVIS = '$Revision$')
      PARAMETER (CSTATE = '$State$')
      PARAMETER (CDATE = '$Date$')
      PARAMETER (CAUTHO = '$Author$')
      DATA CRCSID/   
     1'$Id$'   
     2/   
c  Module information:
      CHARACTER*(*)  CRNAME, CRAUTH
      PARAMETER (CRNAME='DASPE_TAB')
      PARAMETER (CRAUTH='Stepanyan')
c
c  Local User defined variables:
c  -----------------------------
c
      INTEGER iw,iq2,icos,iphi,i,j,ifile,lun
      INTEGER Nw,Nq2,Ncos,Nphi
      REAL Q2, W, CosTh, Phi, Epsilon, nu, ep, mp,theta
      integer nObsv, iObsv, obsv, arg0, arg1
      real theta_val
      real amp, norm_scale
      real remndr, obsv_val, sigma_total 
	REAL hel1R,hel1I,hel2R,hel2I,hel3R,hel3I,hel4R,hel4I                   
	REAL hel5R,hel5I,hel6R,hel6I                   
      DATA mp/0.938/
c_end_var
c
c  executable code for routine DASPE_RUN:
c----6----------------------------------------------------------------72


c     Get the number of data points in the table
      Ierr = 0
      cM=start_value(1)
      cE=start_value(2)
      cS=start_value(3)
      cM2=start_value(4)
      cE2=start_value(5)
      cS2=start_value(6)
      cM3=start_value(7)
      cE3=start_value(8)
      cS3=start_value(9)
      cMP1=start_value(10)
      cSP1=start_value(11)
      cEP2=start_value(12)
      cSP2=start_value(13)
      cMP3=start_value(14)
      cEP3=start_value(15)
      cSP3=start_value(16)
      cMP4=start_value(17)
      cEP4=start_value(18)
      cSP4=start_value(19)
      cEP5=start_value(20)
      cSP5=start_value(21)
      cMP6=start_value(22)
      cEP6=start_value(23)
      cSP6=start_value(24)
      cMP7=start_value(25)
      cEP7=start_value(26)
      cSP7=start_value(27)
      cMP12=start_value(28)
      cEP12=start_value(29)
      cSP12=start_value(30)
      norm_scale = start_value(31) 
      write(6,111)(start_value(i),i=1,parms)
 111  format(25x,'Value of parameters => 1-30 ',/,
     +     '   cM1 =',f9.5,'   cE1 =',f9.5,'   cS1 =',f9.5,/,
     +     '   cM2 =',f9.5,'   cE2 =',f9.5,'   cS2 =',f9.5,/,
     +     '   cM3 =',f9.5,'   cE3 =',f9.5,'   cS3 =',f9.5,/,
     +     '   cMP1 =',f9.5,'   cSP1 =',f9.5,'   cEP2 =',f9.5,'   cSP2 =',f9.5,/,
     +     '   cMP3 =',f9.5,'   cEP3 =',f9.5,'   cSP3 =',f9.5,/,
     +     '   cMP4 =',f9.5,'   cEP4 =',f9.5,'   cSP4 =',f9.5,/,
     +     '   cEP5 =',f9.5,'   cSP5 =',f9.5,/,
     +     '   cMP6 =',f9.5,'   cEP6 =',f9.5,'   cSP6 =',f9.5,/,
     +     '   cMP7 =',f9.5,'   cEP7 =',f9.5,'   cSP7 =',f9.5,/,
     +     '   cMP12 =',f9.5,'   cEP12 =',f9.5,'   cSP12 =',f9.5,'   a_pip =',f9.5/)
C     
      IF ( Wstep.GT.0 .AND. Wmin+Wstep.LT.Wmax )THEN
         Nw = INT( (Wmax - Wmin) / Wstep ) 
      ELSE
         If( Wmin.Eq.Wmax .or. Wstep.Eq.0. )Then
            Nw=1
         Else
            Nw = INT( (Wmax - Wmin) / abs(Wstep) )
         EndIf
      ENDIF
c     
      IF ( cosstep.GT.0 .AND. cosmin+cosstep.LT.cosmax ) THEN
         Ncos = INT( (cosmax - cosmin) / cosstep ) 
      ELSE
         If( cosmin.Eq.cosmax )Then
            Ncos=1
         EndIf
      ENDIF
c     
      IF ( phistep.GT.0 .AND. phimin+phistep.LT.phimax ) THEN
         Nphi = INT( (phimax - phimin) / phistep ) 
      ELSE
         If( phimin.Eq.phimax )Then
            Nphi=1
         EndIf
      ENDIF
c-
c     
      OPEN (UNIT=57,FILE=tabfile,STATUS='unknown')

c       
         Q2 = (Q2min + Q2max)/2.
         write(6,*) 'Q2 = ', Q2
         iq2 = 1
c         write(6,*)nw,ncos,nphi,'  at Q2=',Q2
C- Find the reqiered observable
         nObsv = 0
         do iObsv = 1, 8
            arg0 = 10**(iObsv)
            arg1 = 10**(iObsv-1)
c            write(6,*) arg0, arg1
            remndr = amod ( float( obsv2fit ) , float( arg0 ) )  / arg1
c            write(6,*) remndr
            if ( remndr .GE. 1 .AND. remndr .LT. 4  ) then 
               nObsv = nObsv+1
               pi_type = remndr 
               obsv = iObsv
            endif
         enddo
         write(6,*) nObsv, obsv, pi_type, obsv2fit
         if ( nObsv .GT. 1 ) obsv = 0
c     
         Do iw=1,Nw
c     Loop over W
            W = Wmin + (iw-0.5)*Wstep
c     Get the epsilon
            nu=(w**2+q2-mp**2)/2./mp
            ep=ebeam-nu
            epsilon=1./(1.+2.*(q2+nu**2)/(4.*ebeam*ep-q2))
c            do icos=1,Ncos
c     Loop over cos(Theta*)
            do icos = 1, Ncos
c               theta_val = ( icos - 0.5 )*( 180. / Ncos )
c               costh = cos ( theta_val * acos(0.)/90. )
               costh = cosmin + (icos-0.5)*cosstep
               theta_val = acos( costh ) * 90. / acos(0.)
               do iphi=1,Nphi
c     Loop over phi*
                  phi=phimin + (iphi-0.5)*phistep
c     Calculate cross section
                  CALL daspe_RUN(W,Q2,epsilon,costh,phi,ierr)      
                  if ( pi_type .eq. 2 .and. norm_scale .gt. 0. ) then 
                     amp = 1./norm_scale
                  else
                     amp = 1.
                  endif
c                  cs_tab(iq2,iw,icos,iphi) = sigma(pi_type2fit)                        
                  if ( iphi .eq. 1 .and. 
     &                 ( fitopt .eq. 'GR' .or. fitopt .eq. 'gr' ) ) then
C Write structure functions  in Volker's format
      write( 57, 100 ) w,q2,epsilon,theta_val, -3., amp* sigmaT(pi_type)+epsilon*sigmaL(pi_type2fit), 1.0e-07
      write( 57, 100 ) w,q2,epsilon,theta_val, -2., amp* sigmaTL(pi_type),  1.0e-07
      write( 57, 100 ) w,q2,epsilon,theta_val, -1., amp* sigmaTT(pi_type),  1.0e-07
                  else if (   fitopt .ne. 'GR' .and. fitopt .ne. 'gr' ) then 
c                     write(57,*)q2,w,epsilon,costh,phi,cs_tab(iq2,iw,icos,iphi)
                     if ( obsv .EQ. 1 ) then 
                        obsv_val = amp * sigma(pi_type)
                     elseif ( obsv .EQ. 2 ) then 
                        sigma_total  = sigma(pi_type)
                        obsv_val = sigmaTLP(pi_type)  * 0.67 * 
     *                       sqrt( 2. * epsilon * (1.-epsilon) ) * sin( phi*acos(0.)/90. ) / sigma_total 
                     else
C     Nothing else so far 
                     endif
                     write(57,100)w,q2,epsilon,theta_val,phi,obsv_val, 1.0e-05*obsv_val 
                  endif
               enddo
            enddo
         EndDo
         close(57)
         RETURN
 999     continue
100      format( 1x, F9.5, 1x, F9.5, 1x, F9.6, 1x, F9.4, 1x, F9.4, 2x, 
     &    E12.6, 2x, E12.6, 1x )
         write(6,*)'Error while reading the data file'


      RETURN
      END
c
c------------------------------------------------------------------------------




