// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Tue Nov  6 15:17:46 EST 2007
//

#include "TCTCompositeParticle.h"



ClassImp(TCTCompositeParticle)


TCTCompositeParticle::TCTCompositeParticle (const char *__pname,const char *__foperator, double __mass,double pid_cut): TCTGenParticle(__pname,0,__mass){
  SetName(__pname);
  fOperator = __foperator;
  //  fPartPdgMass = __mass;
  fPartMassCut = pid_cut;
}

TCTCompositeParticle::~TCTCompositeParticle (){

}

//-----------------
//-----------------
void     TCTCompositeParticle::Construct(TLorentzVector  *fvbuff, TVector3 *fzbuff, Int_t n_part)
{
    if(n_part<2){
      printf("Error: Composite Particle has to consist of at least 2 particles\n");
      SetStatus(-1);
      return;
    }
    
    fPartVertex  = MatchTracks(fzbuff[0],fvbuff[0].Vect(),fzbuff[1],fvbuff[1].Vect(),&fVectDoca);
    
    fPartVector  = fvbuff[0]+fvbuff[1];
    
    if(n_part>2){
      for(int ii=2;ii<n_part;ii++){
	fPartVector += fvbuff[ii];
      }
    }

    if(fUsePDGMassFlag>0) {
      fPartVector.SetVectM(fPartVector.Vect(),fPartPdgMass);
    }

    SetStatus(1);
}
//-----------------
void     TCTCompositeParticle::Construct(TCTGenParticle **fPartBuff, Int_t n_part)
{
  if(n_part<2){
    printf("Error: Composite Particle has to consist of at least 2 particles\n");
    SetStatus(-1);
    return;
  }

  TVector3  v_p_0 = fPartBuff[0]->Vect().Vect();
  TVector3  v_v_0 = fPartBuff[0]->Vert();
  TVector3  v_p_1 = fPartBuff[1]->Vect().Vect();
  TVector3  v_v_1 = fPartBuff[1]->Vert();

  //  printf("constructing particle %f with %d\n",fPartPdgMass, n_part);
  fPartVertex  = MatchTracks(v_v_0,v_p_0,v_v_1,v_p_1,&fVectDoca);

  //  int  sign = GetSign
  //  if(sign>0){

  fPartVector = fPartBuff[0]->Vect() + fPartBuff[1]->Vect();

    //  } else {
    //    fPartVector = fPartBuff[0]->Vect() - fPartBuff[1]->Vect();
    //  }

  if(n_part>2){
    for(int ii=2;ii<n_part;ii++){
      //      sign = GetSign(ii);
      TLorentzVector v1 = fPartBuff[ii]->Vect();
	fPartVector += v1;
	//	fPartVector -= v1;
    }
  }

  if(fabs(fPartVector.M()-fPartPdgMass)<fPartMassCut) {
    SetStatus(1);
  } else {
    SetStatus(-1);
  }
}
//----------------------------------------
void     TCTCompositeParticle::Construct(TCTGenParticle *fPartBuff, Int_t n_part)
{
  if(n_part<2){
    printf("Error: Composite Particle has to consist of at least 2 particles\n");
    SetStatus(-1);
    return;
  }

  TVector3  v_p_0 = fPartBuff[0].Vect().Vect();
  TVector3  v_v_0 = fPartBuff[0].Vert();
  TVector3  v_p_1 = fPartBuff[1].Vect().Vect();
  TVector3  v_v_1 = fPartBuff[1].Vert();

  //  printf("constructing particle %f with %d\n",fPartPdgMass, n_part);
  fPartVertex  = MatchTracks(v_v_0,v_p_0,v_v_1,v_p_1,&fVectDoca);

  //  int  sign = GetSign(1);

  //  if(sign>0){
  fPartVector = fPartBuff[0].Vect() + fPartBuff[1].Vect();
  //  } else {
  //    fPartVector = fPartBuff[0]->Vect() - fPartBuff[1]->Vect();
  //  }

  if(n_part>2){
    for(int ii=2;ii<n_part;ii++){
      //      sign = GetSign(ii);
      TLorentzVector v1 = fPartBuff[ii].Vect();
      fPartVector += v1;
      //fPartVector -= v1;
    }
  }

  if(fabs(fPartVector.M()-fPartPdgMass)<fPartMassCut) {
    SetStatus(1);
  } else {
    SetStatus(-1);
  }
}

//****************************************************************
//****************************************************************
int     TCTCompositeParticle::GetNPart()
{
  int n_part = (fOperator.Length()+1)/2;
  if(n_part<0) return 0;
  return n_part;
}

//****************************************************************
//****************************************************************

Int_t   TCTCompositeParticle::GetPart(int __indx)
{
  const char *__str = fOperator.Data();
  int   real_idx = __indx*2;
  int  _idx = (int) (__str[real_idx] - '0');
  return _idx;
}
//****************************************************************
//****************************************************************
Int_t   TCTCompositeParticle::GetSign(int __indx)
{
  if(__indx==0) return 1;
  const char *__str    = fOperator.Data();
  int   real_idx  = __indx*2-1;
  char  __sign    =  (__str[real_idx]);
  
  if(__sign=='-') return -1;
  return +1;
}

void     TCTCompositeParticle::Print()
{
  printf("|%12s|%12.4f|%34s|%12.4f|%12.4f|\n",GetName(),fPartPdgMass,fOperator.Data(),fPartVector.P(),fPartVector.M());
}
