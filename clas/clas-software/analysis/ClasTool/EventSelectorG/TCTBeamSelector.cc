// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Thu Jan 10 12:07:33 EST 2008
//

#include "TCTBeamSelector.h"



ClassImp(TCTBeamSelector)


TCTBeamSelector::TCTBeamSelector (){
	iBeamType = 0;
	dBeamTimingCut = 1.8;
}

TCTBeamSelector::~TCTBeamSelector (){
	iBeamType = 0;
	iDataType = 0;
}

//-----------------
//-----------------
//-----------------
void   TCTBeamSelector::SetBeamType(int _itype)
{
}
void   TCTBeamSelector::SetBeamType(const char *_ctype)
{
	TString fType = _ctype;
	if(fType.CompareTo("photon")==0) iBeamType = BEAM_PHOTON;
	if(fType.CompareTo("electron")==0) iBeamType = BEAM_ELECTRON;
}
void   TCTBeamSelector::SetDataType(int _idtype)
{
}
TLorentzVector  TCTBeamSelector::GetBeamVector()
{

  vBeam.SetPxPyPzE(0.,0.,0.,0);
  if(iBeamType==BEAM_ELECTRON) return vBeam;

  if(iBeamType==BEAM_PHOTON&&iDataType==DATA_SIMULATION) return GetGSIMBeam();

  Double_t    fStartTime  = GetStartTime();
  Int_t  idx_Tagr = GetBestTAGR();

  if(GetTAGRNeighbors(idx_Tagr,dBeamTimingCut)>0) return vBeam;
  TTAGRClass* fBestTAGR   = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", idx_Tagr ) );
  vBeam.SetPxPyPzE(0.,0.,fBestTAGR->GetEnergy(),fBestTAGR->GetEnergy());
  return vBeam;
}

Int_t           TCTBeamSelector::GetTagrEID()
{
  Double_t    fStartTime  = GetStartTime();
  Int_t  idx_Tagr = GetBestTAGR();
  if(idx_Tagr<0||idx_Tagr>fReader->GetNRows( "TAGR" )) return -100.;
  if(GetTAGRNeighbors(idx_Tagr,dBeamTimingCut)>0) return -100.;
  TTAGRClass* fBestTAGR   = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", idx_Tagr ) );
  return (fBestTAGR->GetEid());
}

void   TCTBeamSelector::SetDataType(const char *_cdtype)
{
  TString fType = _cdtype;
  if(fType.CompareTo("gsim")==0) iDataType = DATA_SIMULATION;
  if(fType.CompareTo("data")==0) iDataType = DATA_EXPERIMENT;
  if(fType.CompareTo("datafull")==0) iDataType = DATA_EXPERIMENTFULL;
}

// TLorentzVector  TCTBeamSelector::GetBeamVector()
// {
//   if(iBeamType==BEAM_PHOTON&&iDataType==DATA_SIMULATION) return GetGSIMBeam();
//   if(iBeamType==BEAM_PHOTON&&iDataType==DATA_EXPERIMENT) return GetDATABeamPhotonMini();
//   if(iBeamType==BEAM_PHOTON&&iDataType==DATA_EXPERIMENTFULL) return GetDATABeamPhoton();
// }

TLorentzVector  TCTBeamSelector::GetGSIMBeam()
{
  double  b_mass = 0.;
  TLorentzVector vb(0.,0.,0.,0.);
  Int_t nrow_gsim = fReader->GetNRows( "GSIM" );
  if(nrow_gsim<=0){
    printf("TCTBeamSelector::GetBeamVector:: GSIM Bank has 0 rows\n");
    return vb;
  }

  TGSIMClass* p_gsim = static_cast<TGSIMClass*>( fReader->GetBankRow( "GSIM", 0 ) );
  if(p_gsim==NULL){
    printf("TCTBeamSelector::GetBeamVector:: ERROR GSIM can not be found\n");
    return vb;
  }

  TVector3  l3v = p_gsim->GetMomVec();
  vb.SetVectM(l3v,b_mass);
  return vb;
}

TLorentzVector  TCTBeamSelector::GetDATABeamPhoton()
{
  TLorentzVector  vb(0.,0.,0.,0.);
  Double_t    fStartTime  = GetStartTime();
  Int_t  idx_Tagr = GetBestTAGR();
  if(idx_Tagr<0||idx_Tagr>fReader->GetNRows( "TAGR" )) return vb;
  if(GetTAGRNeighbors(idx_Tagr,dBeamTimingCut)>0) return vb;
  TTAGRClass* fBestTAGR   = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", idx_Tagr ) );
  vb.SetPxPyPzE(0.,0.,fBestTAGR->GetEnergy(),fBestTAGR->GetEnergy());
  return vb;
}

Double_t        TCTBeamSelector::GetBeamTime()
{
  Double_t    fStartTime  = GetStartTime();
  Int_t  idx_Tagr = GetBestTAGR();
  if(idx_Tagr<0||idx_Tagr>fReader->GetNRows( "TAGR" )) return -100.;
  if(GetTAGRNeighbors(idx_Tagr,dBeamTimingCut)>0) return -100.;
  TTAGRClass* fBestTAGR   = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", idx_Tagr ) );
  return (fBestTAGR->GetTagTime()-fStartTime);
}

Int_t     TCTBeamSelector::GetBestTAGR()
{

  Int_t       nTAGR       = fReader->GetNRows( "TAGR" );
  Double_t    fStartTime  = GetStartTime();
  Double_t    fBestTime   = 100;
  Int_t       nIndxBest   = -100;
  TTAGRClass *fPtrBestTAGR;

  for(int idx=0;idx<nTAGR;idx++){
    TTAGRClass* tagr = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", idx ) );
    Double_t    tagtime = tagr->GetTagTime() - fStartTime;
    if(fabs(tagtime)<fBestTime){
      fBestTime = fabs(tagtime);
      nIndxBest = idx;
    }
  }
  return  nIndxBest;
}
//=======================================
Int_t           TCTBeamSelector::GetTAGRNeighbors(Int_t tIndx,double time_interval)
{
  Int_t       nTAGR       = fReader->GetNRows( "TAGR" );
  Double_t    fStartTime  = GetStartTime();
  TTAGRClass* fBestTAGR   = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", tIndx ) );
  Double_t    fBestTAGRTime = fBestTAGR->GetTagTime() - fStartTime;
  Int_t       nNeighbors = 0;
  for(int idx=0;idx<nTAGR;idx++){
     TTAGRClass* tagr = static_cast<TTAGRClass*>( fReader->GetBankRow( "TAGR", idx ) );
     Double_t    tagtime = tagr->GetTagTime() - fStartTime;
     if(fabs(tagtime-fBestTAGRTime)<time_interval&&idx!=tIndx) nNeighbors++;
  }
  return nNeighbors;
}




TLorentzVector  TCTBeamSelector::GetDATABeamPhotonMini()
{
  TLorentzVector  vb(0.,0.,0.,0.);
  TString  fReaderType = fReader->GetReaderType();
  if(strncmp(fReaderType.Data(),"ROOTMINIDSTR",12)==0){
    TMiniHEADClass *ptr_head = (TMiniHEADClass *) fReader->GetBankRow("HEADER",0);
    //    fPhotonEnergy  = ptr_head->Beam_E;
    TVector3 l3v(0.,0.,ptr_head->Beam_E);
    vb.SetVectM(l3v,0.);
  } else {
    printf("TCTBeamSelector::GetDataBeamMini:: ERROR This is not a mini DST so the beam energy is incorrect.\n");
  }
  return vb;
}
//==========================================================
Double_t        TCTBeamSelector::GetStartTime()
{
  if(fReader==NULL) return -100;
  THEADERClass* header = fReader->GetHEADER();
  if(header==NULL) return -100;
  return header->GetSTT();
}
