// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Tue Mar 27 12:58:44 EST 2007
//

#include "TCTEventSelector.h"


TCTEventSelector::TCTEventSelector (){
  //  fInteRactionVertex_Indx = -1;
  fReactionVertexPart     = "";
  fExclusiveFlag[0] = 0;
  fExclusiveFlag[1] = 0;
  fBeamSelector = new TCTBeamSelector();
  fEvtContainer = new TCTContainer();
  fPartContainer = fEvtContainer;
  fIsDataSimulation = 0;
  fNT = NULL;
  fOutputNtupleName = "default_ntuple.root";
  fEVENTBankName    = "EVNT";
}

//***************************************************************
//***************************************************************
//***************************************************************

TCTEventSelector::~TCTEventSelector ()
{

}

//***************************************************************
//***************************************************************
//***************************************************************
// void  TCTEventSelector::SetReaction(const char *react, const char *products)
// {

//   fReaction = react;
//   vl_React[1].SetPxPyPzE(0.,0.,0.,0.938);

//   fPartContainer.AddParticle("beam",22,0.);
//   fPartContainer.AddParticle("target",2212,0.93827);

// //   fPartContainer.AddVariable("rvdist",0.); // Reaction Vertex Distance
// //   fPartContainer.AddVariable("rvz",0.);    // Reaction Vertex Z-coordinate
// //   fPartContainer.AddVariable("gtime",0.);
// //   fPartContainer.AddVariable("ebeam",   0.);
// //   fPartContainer.AddVariable("EID",   0.);
// //   fPartContainer.AddVariable("RunNum",0.);
// //   fPartContainer.AddVariable("EvtNum",0.);

//   TLorentzVector  vT(0.,0.,0.,0.938);
  
//   TCTGenParticle *ptr_part = (TCTGenParticle *) fPartContainer.GetParticleByName("target");

//   ptr_part->SetVector(vT);
//   ptr_part->SetStatus(1);

//   TCTStringUtils  fSu ;

//   TString   Str_arg = products;
  
//   while(Str_arg.Length()>0){
//     TString  pname = fSu.PullStr(&Str_arg,':');
//     TParticlePDG *fpart = fPDGData.GetParticle(pname.Data());
//     if(fpart!=NULL){
//       printf("adding particle %s : mass =>> %f (%d)\n",pname.Data(),fpart->Mass(),fpart->PdgCode());
//       fPartContainer.AddParticle(pname.Data(),fpart->PdgCode(),fpart->Mass());
//     } else {
//       printf("\n-\nERROR: unrecognized particle name (%s)\n\n",pname.Data());
//     }
//   }
//   fPartContainer.Print();
// }

//==============================================================
// void   TCTEventSelector::AddCompositeParticle(const char *pname, const char *formulae, double  pmass)
// {

// }

void   TCTEventSelector::SaveNtuple()
{
  TFile *hf = new TFile(fOutputNtupleName.Data(),"CREATE");
  if(hf==NULL){
    printf("The File %s seems to exist\n",fOutputNtupleName.Data());
  }

  fNT->Write();
  hf->Write();
  hf->Close();
  delete hf;
}


void            TCTEventSelector::Run(int n_events, int skip,TGProgressBar *_ptr_bar)
{
 
  int  _available_events = fReader->GetTree()->GetEntries();
  int iN = 0;
  int iNToRun = n_events;
  
  if(n_events>_available_events){
    iNToRun = _available_events;
  }

  if(_ptr_bar != NULL){
    _ptr_bar->SetMin(0);
    _ptr_bar->SetMax(iNToRun);
    _ptr_bar->SetPosition(0.);
  }

  while(iN<iNToRun){
    fReader->Next();
    if(iN%5000==0){
      if(_ptr_bar!=NULL){
	_ptr_bar->Increment((float) 5000);
	gSystem->ProcessEvents();
	//	_ptr_bar->DoRedraw();
      } else {
	printf("%d / %d events processed so far \n",iN,n_events);
      }
    }
    int status = ConstructEvent();
    if(status>0) FillNtuple();
    iN++;
  }
}

void            TCTEventSelector::_XML_LoadSelector(XMLNodePointer_t node)
{

  TString  f_n,f_f,f_m;
  f_n = fXMLEngine.GetAttr(node,"beamtype");

  if(f_n.CompareTo("photon")==0){
    fBeamType = 1;
  } else {
    fBeamType = 0;
  }

  f_n = fXMLEngine.GetAttr(node,"datatype");

  if(f_n.CompareTo("gsim")==0){
    fIsDataSimulation = 1;
  } else {
    fIsDataSimulation = 0;
  }
  
  if(fBeamType>0){
    fBeamSelector->SetBeamType("photon");
  } else {
    fBeamSelector->SetBeamType("electron");
  }

  if(fIsDataSimulation>0){
    fBeamSelector->SetDataType("gsim");
  } else {
    fBeamSelector->SetDataType("data");
  }
 
  
  f_n = fXMLEngine.GetAttr(node,"eventbank");
  if(f_n.CompareTo("GSIM")==0||f_n.CompareTo("EVNT")){
    fEVENTBankName = f_n.Data();
  } else {
    printf("\n\nERROR:!_XML_LoadSelector:: Bank name [%s] is unkonw\n",f_n.Data());
  }


  XMLNodePointer_t  child = fXMLEngine.GetChild(node);
  while(child!=0){
    f_n = fXMLEngine.GetNodeName(child);

    if(f_n.CompareTo("file")==0){
      f_f = fXMLEngine.GetAttr(child,"name");
      fInputDataFile = f_f;
    }

    child = fXMLEngine.GetNext(child);
  }
}

void   TCTEventSelector::Print()
{
  printf("Event Selector Configuration\n\n");
  printf("InputFile = %s\n",fInputDataFile.Data());
  printf("Beam Type = %d\n",fBeamType);
  printf("Data Type = %d\n",fIsDataSimulation);
  printf("\n->>\n");
  fEvtContainer->Print();
}

void            TCTEventSelector::LoadXMLConfig(const char *_xml_file)
{
   XMLDocPointer_t  xmldoc = fXMLEngine.ParseFile(_xml_file);
  if(xmldoc==0){
    printf("Failed to Parse XML File %s\n",_xml_file);
    return;
  }

  //  ClearAll();
  XMLNodePointer_t  mainnode = fXMLEngine.DocGetRootElement(xmldoc);

  XMLNodePointer_t  child = fXMLEngine.GetChild(mainnode);

  while(child!=NULL){
    // _XML_LoadParticles(child);    
    TString   fNodeName = fXMLEngine.GetNodeName(child);
    if(fNodeName.CompareTo("Selector")==0) _XML_LoadSelector(child);
//     if(fNodeName.CompareTo("Particles")==0) _XML_LoadParticles(child);
//     if(fNodeName.CompareTo("CompositeParticles")==0) _XML_LoadComposite(child);
//     if(fNodeName.CompareTo("Variables")==0) _XML_LoadVariables(child);
//     if(fNodeName.CompareTo("Vectors")==0) _XML_LoadVectors(child);
    //    printf("Found Node %s\n",fXMLEngine.GetNodeName(child));
    child = fXMLEngine.GetNext(child);
  }

  fXMLEngine.FreeDoc(xmldoc);

  fEvtContainer->LoadXMLConfig(_xml_file);
}


void   TCTEventSelector::Init()
{
  printf("\n\nAdding file ==>> %s\n",fInputDataFile.Data());
  fReader->Add(fInputDataFile.Data());
  printf("File Contains %d  events\n",fReader->GetTree()->GetEntries());
  InitNtuple();
}

void   TCTEventSelector::Draw(const char *_var_name, const char *_opt)
{
  if(fNT==NULL) {
    printf("The Tree is not initialized.... Try Again Later \n");
    return;
  }
  cout << " Events in the Ntuple  " << fNT->GetEntries() << endl;
  fNT->Draw(_var_name,_opt);
}

Int_t  TCTEventSelector::ConstructSpecial()
{

}

Int_t  TCTEventSelector::IsSimParticle(const char *_name)
{
  fTmpStr = _name;
  if(fTmpStr.Contains("gsim_")) return 1;
  return 0;
}

Int_t  TCTEventSelector::ConstructParticles()
{
  Int_t   _N_Rows      = fReader->GetNRows(fEVENTBankName.Data());
  Int_t   _N_Rows_gsim = fReader->GetNRows("GSIM");  
  Int_t   _N_Part      = fEvtContainer->GetNParticles();
  Int_t   idx;

  //  fPartContainer->Reset();

  for(int i=0;i<_N_Part;i++){
    TCTGenParticle *_p_ptr = fEvtContainer->GetParticleByIndex(i);

    fTmpStr = _p_ptr->GetName();
    if(fTmpStr.CompareTo("beam")==0||fTmpStr.CompareTo("target")==0) continue;
    // This loop looks up particle either in EVENT bank
    // or GSIM Bank
    if(_p_ptr->GetStatus()<1){
      if(IsSimParticle(_p_ptr->GetName())>0){
	for(idx=0;idx<_N_Rows_gsim;idx++){
	  TVirtualData *_data_ptr = static_cast<TVirtualData*> (fReader->GetBankRow("GSIM",idx));
	  if(_p_ptr->GetPdgId()==_data_ptr->GetId()){
	    _p_ptr->SetVector3(_data_ptr->GetMomVec());
	    _p_ptr->SetVertex(_data_ptr->GetVertex());
	    _p_ptr->SetStatus(1);
	  }
	}
      } else {
	for(idx=0;idx<_N_Rows;idx++){
	  TVirtualData *_data_ptr = static_cast<TVirtualData*> (fReader->GetBankRow(fEVENTBankName.Data(),idx));
	  if(_p_ptr->GetPdgId()==_data_ptr->GetId()){
	    _p_ptr->SetVector3(_data_ptr->GetMomVec());
	    _p_ptr->SetVertex(_data_ptr->GetVertex());
	    _p_ptr->SetStatus(1);
	  }
	}
      }
    }
    //-----------------------------------------------
  }
  return fEvtContainer->GetStatus();
}


Int_t  TCTEventSelector::ConstructEvent()
{

  TString  fDataBankName = fEVENTBankName.Data();

  //  if(fIsDataSimulation>0) fDataBankName = "GSIM";


  fPartContainer = fEvtContainer;
  //  printf("construct Event\n");
  //  Int_t 

//  printf("Starting Beam Selector\n");
  TLorentzVector  vBeam = fBeamSelector->GetBeamVector();
  //  return -1;
//  printf("end Beam Selector\n");
  if(vBeam.P()<=0){
    //    printf("TCTEventSelector::ConstructEvent:: Error Accured while trying to get the beam energy....Beam = %9.5f\n",vBeam.P());
    return -1;
  }

  Int_t  nrows     = fReader->GetNRows(fDataBankName.Data());
  Int_t  npart     = fEvtContainer->GetNParticles();
 // printf("aa\n");
  fPartContainer->Reset();
 // printf("bb\n");
  //  printf("%d %d\n",nrows,npart);
  TCTGenParticle   *ptr_b = fEvtContainer->GetParticleByName("beam");
  TCTGenParticle   *ptr_t = fEvtContainer->GetParticleByName("target");
  //  TLorentzVector  vT(0.,0.,0.,0.938);
  //  TLorentzVector vG(0.,0.,fPhotonSel.GetE(),fPhotonSel.GetE());
  
  if(ptr_b==NULL){
    printf("TCTEventSelector::ConstructEvent():: Error !! beam particle is not set.\n\n");
  }
  if(ptr_t==NULL){
    printf("TCTEventSelector::ConstructEvent():: Error !! target particle is not set.\n\n");
  }

  

  ptr_b->SetStatus(1);
  ptr_t->SetStatus(1);
  TVector3  vBeam_vrtx(0.,0.,-40.);
  ptr_b->SetVector(vBeam);
  ptr_b->SetVertex(vBeam_vrtx);
  
  Int_t  vRunNum = fReader->GetRunNumber();
  Int_t  vEvtNum = fReader->GetEventNumber();

  fPartContainer->SetVariable("runnum",(double) vRunNum,1);
  fPartContainer->SetVariable("evtnum",(double) vEvtNum,1);
  
  //  return -1;
 // printf("cc\n");
  //  ptr_t->SetVector(vT);
  Int_t  fPartUnclaimedCharged = 0;
  Int_t  fPartUnclaimedNeutral = 0;
  Int_t  fPartClaimeFlag;


  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Int_t  fpart_status = ConstructParticles();
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if(fpart_status<1) return -1;
  //  if(fPartContainer->GetStatus()<0) return -1;
  

  fPartContainer->SetVariable("ncharged",(double) fPartUnclaimedCharged,1);
  fPartContainer->SetVariable("nneutral",(double) fPartUnclaimedNeutral,1);

  fEvtContainer->ConstructComposite();
  fEvtContainer->ConstructVectors();
  fEvtContainer->UpdateInteractionVertex();
  
  int v_status = fPartContainer->ConstructVariables();

  if(v_status<0) return -1;

  //  TVector3   v_int = GetInteractionVertex();



  return 1;
}


TVector3        TCTEventSelector::GetVertexVector(const char *partname, int physevent)
{
  TVector3  vert(0.,0.,-100.);
  TParticlePDG *fpart = fPDGData.GetParticle(partname);
  TString  BankName = "EVNT";
  
  if(physevent!=0){
    BankName = "GSIM";
  }

  Int_t nrow_part = fReader->GetNRows(BankName.Data());
  
  for(int jj=0;jj<nrow_part;jj++){
    TVirtualData *ptr_data = (TVirtualData *) fReader->GetBankRow(BankName.Data(),jj);
    if(ptr_data->GetId()==fpart->PdgCode()){
      vert = ptr_data->GetVertex();
      return vert;
    }
  }
  return vert;
}

Int_t           TCTEventSelector::GetNParticle(int _id)
{
  int  _num_part = 0;
  Int_t nrow_part = fReader->GetNRows("EVNT");
  for(int jj=0;jj<nrow_part;jj++){
    TVirtualData *ptr_data = (TVirtualData *) fReader->GetBankRow("EVNT",jj);
    if(ptr_data->GetStat()>0){
      if(ptr_data->GetId()==_id) _num_part++;
    }
  }
  return _num_part;

}
TLorentzVector  TCTEventSelector::GetLorentzVector(const char *partname, int physevent)
{
  TLorentzVector  vL(0.,0.,0.,0.);
  TParticlePDG *fpart = fPDGData.GetParticle(partname);
  TString  BankName = "EVNT";
  
  if(physevent!=0){
    BankName = "GSIM";
  }

  Int_t nrow_part = fReader->GetNRows(BankName.Data());
  //  printf("%s %d %s %d\n",BankName.Data(),fpart->PdgCode(),partname,nrow_part);
  for(int jj=0;jj<nrow_part;jj++){
    TVirtualData *ptr_data = (TVirtualData *) fReader->GetBankRow(BankName.Data(),jj);
    //    printf("from GSIM %d %d\n",ptr_data->GetId(),ptr_data->GetStat());
    int _status = ptr_data->GetStat();
    if(physevent!=0) _status = 2;
    _status = 2;
    if(ptr_data->GetId()==fpart->PdgCode()&&_status>0){
      TVector3 v3 = ptr_data->GetMomVec();
      vL.SetVectM(v3,fpart->Mass());
      return vL;
    }
  }
  return vL;
}

TVector3   TCTEventSelector::GetInteractionVertex()
{
  TVector3 v1(0.,0.,0.);
  double   dist;
  TCTGenParticle *ptr_p1 = fPartContainer->GetParticleByName(fReactionVertex[0]);
  TCTGenParticle *ptr_p2 = fPartContainer->GetParticleByName(fReactionVertex[1]);
  if(ptr_p1==NULL||ptr_p2==NULL) return v1;
  v1 = fVectOperations.func_ray_intersect(ptr_p1->Vert(),ptr_p1->Vect().Vect(),ptr_p2->Vert(),ptr_p2->Vect().Vect(),&dist);
  return v1;
}
//==================================================================
void   TCTEventSelector::InitNtuple()
{
  fNT = new TNtuple("T","Created By Event Selector",fPartContainer->GetVariableList().Data());
}
//==================================================================
void   TCTEventSelector::FillNtuple()
{
  fPartContainer->GetVariableBuff(&fNtupleBuff);
  fNT->Fill(fNtupleBuff.GetArray());
}
//==================================================================
Int_t  TCTEventSelector::GetNCharged()
{
  Int_t ncharged = 0;
  Int_t nrow_part = fReader->GetNRows("EVNT");
  for(int jj=0;jj<nrow_part;jj++){
     TVirtualData *ptr_data = (TVirtualData *) fReader->GetBankRow("EVNT",jj);
     if(fReader->GetPartCharge(jj)!=0&&ptr_data->GetStat()>0) ncharged++;
  }
  return  ncharged;
}
//===========================================================
Int_t  TCTEventSelector::GetNNeutral()
{
  Int_t nneutral = 0;
  Int_t nrow_part = fReader->GetNRows("EVNT");
   for(int jj=0;jj<nrow_part;jj++)
     if(fReader->GetPartCharge(jj)==0) nneutral++;
  return nneutral;
}
void   TCTEventSelector::PrintEvent()
{
  Int_t nrow_part = fReader->GetNRows("EVNT");
  printf("Event Number ->> %d\n",fReader->GetEventNumber());
  for(int jj=0;jj<nrow_part;jj++){
    printf("%4d %9.5f\n",fReader->GetPartID(jj),fReader->GetPart3Vector(jj).Mag());
  }
}
//===========================================================
Int_t  TCTEventSelector::Pattern(const char *pattern_, int extra_ch, int extra_ntr)
{
  TString         fpattern = pattern_;
  Int_t           npart    = fStrUtils.GetCount(fpattern,':');

  fParticleID.Set(npart+1);
  fParticleIDFlag.Set(npart+1);

//    TArrayI         fPartID(npart+1);
//    TArrayI         fPartCount(npart+1);
  TString         fpartName;
//    //============
//    // Creating an array with Particle IDs base on their name
//    //------------
  for(int i=0;i<npart+1;i++){
    fParticleIDFlag.AddAt(0,i);
    fpartName = fStrUtils.PullStr(&fpattern,':');
    TParticlePDG *fpart = fPDGData.GetParticle(fpartName.Data());
    if(fpart==NULL){
      printf("\n-\nERROR: unrecognized particle name (%s)\n\n",fpartName.Data());
    } else {
      fParticleID.AddAt(fpart->PdgCode(),i);
    }
  }

  
  
//  printf("Looking for : ");
//   for(int i=0;i<npart+1;i++){
//     printf("%d ",fParticleID.At(i));
//   }
//   printf("\n");

   Int_t nrow_part = fReader->GetNRows("EVNT");
   int  ic_unclaimed = 0;
   int  in_unclaimed = 0;
   int  flag_claim;
   for(int jj=0;jj<nrow_part;jj++){
     flag_claim = 0;
     for(int ii=0;ii<npart+1;ii++){
       if(fReader->GetPartID(jj)==fParticleID.At(ii)
	  &&fParticleIDFlag.At(ii)==0){
	 fParticleIDFlag.AddAt(1,ii);
	 flag_claim = 1;
       }
     }
     
     if(flag_claim==0){
       if(fReader->GetPartCharge(jj)!=0) 
	 ic_unclaimed++;
       else in_unclaimed++;
     }

   }
//    for(int kk=0;kk<npart+1;kk++) fpartcount.AddAt(0,kk);
//    //-----------
//    // Analysing the Event for the pattern
//    //-----------

//   printf("Unclaimed %d %d\n",ic_unclaimed,in_unclaimed);

   int  ret_value = 1;
   
   for(int ii=0;ii<npart+1;ii++) 
     if(fParticleIDFlag.At(ii)==0) ret_value = 0;

   if(extra_ch>-1&&ic_unclaimed!=extra_ch) ret_value = 0;
   if(extra_ntr>-1&&in_unclaimed!=extra_ntr) ret_value = 0;
   
   return ret_value;
}
