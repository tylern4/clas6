// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Tue Mar 25 17:24:13 EDT 2008
//

#include "TCTHistoContainer.h"



ClassImp(TCTHistoContainer)


TCTHistoContainer::TCTHistoContainer (){
  fHistArray = new TObjArray(5);
}

TCTHistoContainer::~TCTHistoContainer ()
{

}

//-----------------
//-----------------
//-----------------

void   TCTHistoContainer::AddHist(const char *_name, const char *_title, int _nbins, double _x_min,double _x_max, const char *_var, const char *_cuts)
{
  TNtHisto *_new_hist = new TNtHisto(_name);
  _new_hist->SetBins(_nbins,_x_min,_x_max);
  _new_hist->SetVar(_var);
  _new_hist->SetCuts(_cuts);
  fHistArray->AddLast(_new_hist);
}

void   TCTHistoContainer::AddHist(TNtHisto *_fh)
{
  fHistArray->AddLast(_fh);
}

void   TCTHistoContainer::SaveToDir(const char *pattern)
{
  
  int  n_h = GetNHistos();
  for(int i=0;i<n_h;i++)
    {
      TNtHisto *_ptr = (TNtHisto *) GetHistByIndex(i);
      TH1D *_H = (TH1D *) ((TNtHisto1D *) _ptr)->GetH();
      TString  hname = _H->GetName();
      if(hname.Contains(pattern))
	_H->Write();
    }
}

void   TCTHistoContainer::SaveToFile(const char *_fname)
{
  int _n_hist = GetNHistos();
  TFile *hf = new TFile(_fname,"CREATE");

  int  n_h = GetNHistos();
  for(int i=0;i<n_h;i++)
    {
      TNtHisto *_ptr = (TNtHisto *) GetHistByIndex(i);
      TH1D *_H = (TH1D *) ((TNtHisto1D *) _ptr)->GetH();
      _H->Write();
    }

  hf->Write();
  hf->Close();
}

TNtHisto   *TCTHistoContainer::GetHistByName(const char *_hname)
{
  TNtHisto *_ptr = (TNtHisto *) fHistArray->FindObject(_hname);
  if(_ptr!=NULL) return _ptr;
  return NULL;
}

TNtHisto   *TCTHistoContainer::GetHistByIndex(int _indx)
{
  return static_cast<TNtHisto *>(fHistArray->At(_indx));
  //  return NULL;
}
void   TCTHistoContainer::DrawAll()
{
  int  n_h = GetNHistos();
  for(int i=0;i<n_h;i++)
    {
      TNtHisto *_ptr = (TNtHisto *) GetHistByIndex(i);
      Draw(_ptr->GetName());
    }  
}
void   TCTHistoContainer::Draw(const char *_histname)
{
  printf("Drawing Histogram ==>> %s\n",_histname);
  TNtHisto *_ptr = GetHistByName(_histname);
  TH1D *_H =  (TH1D *) _ptr->GetH();
  if(_H->GetEntries()==0) Fill(_histname);
  _H->Draw();
}

vector<string>  TCTHistoContainer::GetHistNames()
{
}
void   TCTHistoContainer::Fill(const char *_histname)
{
  TNtHisto *_ptr = GetHistByName(_histname);

  if(_ptr!=NULL&&fNtuple!=NULL){
    int  n_dim = _ptr->GetDim();
    int  n_ent = fNtuple->Draw(_ptr->GetVar(),_ptr->GetCuts());
    TH1D *_H = (TH1D *) _ptr->GetH();
    Double_t  *_fX = fNtuple->GetV1();
    for(int i=0;i<n_ent;i++) _H->Fill(_fX[i]);
  } else {
    printf("Ntuple::FILL Error\n");
  }
}

void    TCTHistoContainer::Print()
{
  int n_h = GetNHistos();
  for(int i=0;i<n_h;i++)
    {
      TNtHisto *_ptr = GetHistByIndex(i);
      printf("%12s | %64s \n",_ptr->GetVar().Data(),_ptr->GetCuts().Data());
    }
}
void        TCTHistoContainer::LoadConfig(const char *_xml_file)
{
  XMLDocPointer_t  xmldoc = fXMLEngine.ParseFile(_xml_file);
  if(xmldoc==0){
    printf("Failed to Parse XML File %s\n",_xml_file);
    return;
  }
  XMLNodePointer_t  mainnode = fXMLEngine.DocGetRootElement(xmldoc);
  XMLNodePointer_t  child = fXMLEngine.GetChild(mainnode);
   while(child!=NULL){
    // _XML_LoadParticles(child);    
    TString   fNodeName = fXMLEngine.GetNodeName(child);
    if(fNodeName.CompareTo("Hist1D")==0) _XML_Load1dHist(child);
    if(fNodeName.CompareTo("Hist2D")==0) _XML_Load2dHist(child);
    child = fXMLEngine.GetNext(child);
   }
   fXMLEngine.FreeDoc(xmldoc);
}
void        TCTHistoContainer::_XML_Load1dHist(XMLNodePointer_t node)
{
  TString  _name;
  TString  _nbins, _xmin,_xmax,_var,_cutstr,_title;

  _name   = fXMLEngine.GetAttr(node,"name");
  _nbins  = fXMLEngine.GetAttr(node,"bins");
  _xmax   = fXMLEngine.GetAttr(node,"max");
  _xmin   = fXMLEngine.GetAttr(node,"min");
  _var    = fXMLEngine.GetAttr(node,"var");
  _cutstr = fXMLEngine.GetAttr(node,"cuts");
  _title = fXMLEngine.GetAttr(node,"xtitle");

  TNtHisto1D *_ptr = new TNtHisto1D(_name,_nbins.Atoi(),_xmin.Atof(),_xmax.Atof());

  if(_title.Length()>2) _ptr->SetTitle(_title.Data());
  _ptr->SetVar(_var.Data());
  _ptr->SetCuts(_cutstr.Data());
  SetStyle((TH1D *) _ptr->GetH());
  AddHist((TNtHisto *) _ptr);
}

void   TCTHistoContainer::SetStyle(TH1D *hist,int _style)
{
 hist->GetXaxis()->SetLabelFont(42);
  hist->GetYaxis()->SetLabelFont(42);
  hist->GetXaxis()->SetLabelSize(0.05);
  hist->GetYaxis()->SetLabelSize(0.05);
  hist->GetXaxis()->SetTitleFont(42);
  hist->GetYaxis()->SetTitleFont(42);

  hist->GetXaxis()->SetTitleSize(0.05);
  hist->GetYaxis()->SetTitleSize(0.05);
  hist->SetLineWidth(2);
  hist->SetMarkerStyle(20);
}

void        TCTHistoContainer::_XML_Load2dHist(XMLNodePointer_t node)
{
}
