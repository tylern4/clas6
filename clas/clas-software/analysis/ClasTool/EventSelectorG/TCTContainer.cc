// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Thu Dec  6 13:49:37 EST 2007
//

#include "TCTContainer.h"



ClassImp(TCTContainer)


TCTContainer::TCTContainer (){
  fParticleArray          = new TObjArray(5);
  fCompositeParticleArray = new TObjArray(5);
  fVectorArray            = new TObjArray(5);
  fVariableArray          = new TObjArray(5);
}

TCTContainer::~TCTContainer ()
{
  
}

//-----------------
//-----------------

Int_t            TCTContainer::GetNElements(const char *_src)
{
  TString   _src_str = _src;
  if(_src_str.CompareTo("Particles")==0)  return fParticleArray->GetEntries();
  if(_src_str.CompareTo("Composite")==0)  return fCompositeParticleArray->GetEntries();
  if(_src_str.CompareTo("Vectors")==0  )  return fVectorArray->GetEntries();
  if(_src_str.CompareTo("Variables")==0)  return fVariableArray->GetEntries();
  return 0;
}

TString          TCTContainer::GetElementName(const char *_src, int _idx)
{
  TString   _src_str = _src;
  TNamed   *_ptr;
  if(_src_str.CompareTo("Particles")==0)
    {
      _ptr = (TNamed *) fParticleArray->At(_idx);
      if(_ptr!=NULL) return TString(_ptr->GetName());
    }
  if(_src_str.CompareTo("Composite")==0) 
    {
      _ptr = (TNamed *) fCompositeParticleArray->At(_idx);
      if(_ptr!=NULL) return TString(_ptr->GetName());
    }
  if(_src_str.CompareTo("Vectors")==0  ) 
    {
      _ptr = (TNamed *) fVectorArray->At(_idx);
      if(_ptr!=NULL) return TString(_ptr->GetName());

    }
  if(_src_str.CompareTo("Variables")==0) 
    {
      _ptr = (TNamed *) fVariableArray->At(_idx);
      if(_ptr!=NULL) return TString(_ptr->GetName());
    }

    return TString("");
}

//-----------------
void  TCTContainer::Reset()
{
  Int_t  npart = GetNParticles();
  for(int i=0;i<npart;i++){
    TCTGenParticle  *ptr = GetParticleByIndex(i);
    ptr->SetStatus(-1);
  }
}

//-----------------------------------------------------
void             TCTContainer::SetPartByReaction(const char *_pinitial, const char *_pfinal)
{
  
}
//-----------------------------------------------------
void             TCTContainer::SetReaction(const char *_pinitial)
{

  TString  sBeam = fStrUtils.GetToken(_pinitial,0,':');
  TString  sTarget = fStrUtils.GetToken(_pinitial,1,':');

  TCTGenParticle   *ptr_beam = GetParticleByName("beam");
  TCTGenParticle   *ptr_targ = GetParticleByName("target");
  if(ptr_beam!=NULL){
    fParticleArray->Remove(ptr_beam);
  }

  if(ptr_targ!=NULL){
    fParticleArray->Remove(ptr_targ);
  }

  //  TCTGenParticle  *first_inrow = (TCTGenPArticle *) fParticleArray->At(0);
  TParticlePDG *fpart = fPDGData.GetParticle(sTarget.Data());
  
  if(fpart==NULL){
    printf("\nERROR:(SetReaction::): Particle [%s] is not found ! \n\n",sTarget.Data());
  } else {
    //    AddParticle("target",fpart->PdgCode(),fpart->Mass());
    fParticleArray->AddLast(new TCTGenParticle("target",sTarget.Data(),fpart->PdgCode(),fpart->Mass()));
  }

  fpart = fPDGData.GetParticle(sBeam.Data());
  if(fpart==NULL){
    printf("\nERROR:(SetReaction::): Particle [%s] is not found ! \n\n",sBeam.Data());
  } else {
    fParticleArray->AddLast(new TCTGenParticle("beam",sBeam.Data(),fpart->PdgCode(),fpart->Mass()));
    //    AddParticle("beam",fpart->PdgCode(),fpart->Mass());
  }
  
}

//-----------------------------------------------------
Int_t  TCTContainer::Status()
{
  Int_t  npart = GetNParticles();
  for(int i=0;i<npart;i++){
    TCTGenParticle  *ptr = GetParticleByIndex(i);
    if(ptr->GetStatus()<0) return -1;
  }
  return 1;
}
void   TCTContainer::AddParticle(const char *pname,  const char *ppdgname, int part_pdg, double part_mass)
{
  fParticleArray->AddLast(new TCTGenParticle(pname,ppdgname,part_pdg,part_mass));
}

void   TCTContainer::AddParticle(const char *pname, const char *ppdgname)
{
  TParticlePDG *fpart = fPDGData.GetParticle(ppdgname);
  if(fpart==NULL){
    printf("\nERROR:(AddParticle): Particle with name [%s] does not exist in the databse !\n\n",ppdgname);
  } else {
    AddParticle(pname,ppdgname,fpart->PdgCode(),fpart->Mass());
  }
}
//=================================================================================
void   TCTContainer::AddCompositeParticle(const char *pname, const char *formulae, double pmass, int  _usepdgmass)
{
   fCompositeParticleArray->AddLast(new TCTCompositeParticle(pname,formulae, pmass,100.));
   TCTGenParticle *ptr = GetParticleByName(pname);
   if(ptr!=NULL){
     printf("AddCompositeParticle:  Using the PDG Mass for the particle %s\n",pname);
     ptr->UsePdgMass(_usepdgmass);
   }
}
//=================================================================================
void   TCTContainer::AddVariable(const char *vname,const char *system, const char *system_var)
{
   fVariableArray->AddLast(new TCTVariable(vname,system,system_var));
}

void   TCTContainer::AddVariable(const char *vname, double _val)
{
   fVariableArray->AddLast(new TCTVariable(vname,_val));
}


void   TCTContainer::AddVector(const char *pname, const char *_oper)
{
  fVectorArray->AddLast(new TCTVector(pname,_oper));
}

//=================================================================================
TLorentzVector   TCTContainer::GetPartVectorByName(const char *pname)
{
  TLorentzVector vl(0.,0.,0.,0.);
  TCTGenParticle *ptr_1 = GetParticleByName(pname);
  if(ptr_1==NULL){
    printf("ERROR !(GetVectorByName): particle with name [%s] requested can not be found\n\n",pname);
    return vl;
  }
  return ptr_1->Vect();
}

void   TCTContainer::SetVariableCuts(const char *vname, double __lo, double __hi)
{
  TCTVariable *ptr_var = GetVariableByName(vname);
  if(ptr_var!=NULL){
    ptr_var->SetCuts(__lo,__hi);
  }
}
//=================================================================================
TCTGenParticle   *TCTContainer::GetParticleByName(const char *pname)
{
  TCTGenParticle *ptr_1 = static_cast<TCTGenParticle*> (fParticleArray->FindObject(pname));
  if(ptr_1!=NULL) return ptr_1;
  TCTGenParticle *ptr_2 = static_cast<TCTGenParticle*> (fCompositeParticleArray->FindObject(pname));
  if(ptr_2==NULL){
    //    printf("\n\nERROR !(GetParticleByName): particle with name [%s] requested can not be found\n\n",pname);
  }
  return ptr_2;
}
//=================================================================================
Double_t         TCTContainer::GetVariable(const char *vname)
{
  TCTVariable *ptr_1 = static_cast<TCTVariable*> (fVariableArray->FindObject(vname));
   if(ptr_1==NULL){
    printf("\n\nERROR !(GetVariableByName): variable with name [%s] requested can not be found\n\n",vname);
    return -1000.;
  }
   return ptr_1->Get();
}
//=================================================================================
TCTVector        *TCTContainer::GetVectorByName(const char *name)
{
  TCTVector  *ptr_1 = static_cast<TCTVector*> (fVectorArray->FindObject(name));
  if(ptr_1==NULL){
    printf("\n\nERROR !(GetVariableByName): variable with name [%s] requested can not be found\n\n",name);
  }
  return ptr_1;
}

//=================================================================================
TCTVariable      *TCTContainer::GetVariableByName(const char *vname)
{
  TCTVariable *ptr_1 = static_cast<TCTVariable*> (fVariableArray->FindObject(vname));
   if(ptr_1==NULL){
     printf("\n\nERROR !(GetVariableByName): variable with name [%s] requested can not be found\n\n",vname);
  }
   return ptr_1;
}
//=================================================================================
void             TCTContainer::SetParticle(const char *pname, TLorentzVector __v1, TVector3  __vrt)
{
  TCTGenParticle *ptr_1 = GetParticleByName(pname);
  if(ptr_1!=NULL){
    ptr_1->SetVector(__v1);
    ptr_1->SetVertex(__vrt);
  }
}

Int_t            TCTContainer::GetNParticles()
{
  return (fParticleArray->GetEntries());
}
//=================================================================================
void       TCTContainer::UpdateInteractionVertex(TVector3  _ivert)
{

  

  Int_t n_rows_p  =  fParticleArray->GetEntries();
  TCTGenParticle *ptr_3;
  for(int ii=0;ii<n_rows_p;ii++){
    ptr_3 = static_cast<TCTGenParticle*> (fParticleArray->At(ii));
    ptr_3->SetInteractionVertex(_ivert);
  }

  Int_t n_rows_cp  =  fCompositeParticleArray->GetEntries();
  TCTGenParticle *ptr_2;
  for(int ii=0;ii<n_rows_cp;ii++){
    ptr_2 = static_cast<TCTGenParticle*> (fCompositeParticleArray->At(ii));
    ptr_2->SetInteractionVertex(_ivert);
  }

}
//=================================================================================
void       TCTContainer::UpdateInteractionVertex()
{
  Int_t n_rows_cp  =  fCompositeParticleArray->GetEntries();

  TCTGenParticle *ptr_2;
  ptr_2 = GetParticleByName("pREACTIONVert");

  //  PrintParticle("pREACTIONVert");
  //  PrintParticle("K0S");

  TVector3 _ivert;
  if(ptr_2==NULL){
    _ivert.SetXYZ(0.,0.,-100.);
  } else {
    //    ConstructCompositeParticle((TCTCompositeParticle *) ptr_2);
   _ivert = ptr_2->Vert();
  }

  TString vPVrtx = "pREACTIONVert";
  for(int ii=0;ii<n_rows_cp;ii++){
    ptr_2 = static_cast<TCTGenParticle*> (fCompositeParticleArray->At(ii));
    if(vPVrtx.CompareTo(ptr_2->GetName())!=0) 
      ptr_2->SetInteractionVertex(_ivert);
  }

}

//=================================================================================
void             TCTContainer::SetReactionVertex(const char *_np1, const char *_np2)
{
  TString  fpop = "[";
  fpop += _np1;
  fpop += "]+[";
  fpop += _np2;
  fpop += "]";
  AddCompositeParticle("pREACTIONVert",fpop.Data(),1.);
  //  AddVariable("rvdist","pREACTIONVert","DIST");
  AddVariable("rvdist","pREACTIONVert","DOCA");
  AddVariable("rvz","pREACTIONVert","Vz");
}
//=================================================================================
TCTGenParticle  *TCTContainer::GetParticleByIndex(int __idx)
{
  return (static_cast<TCTGenParticle*> (fParticleArray->At(__idx)));
}
//=================================================================================
void             TCTContainer::SetVariable(const char *vname, double __val, int errmsg)
{
  TCTVariable *ptr_1 = static_cast<TCTVariable*> (fVariableArray->FindObject(vname));
   if(ptr_1==NULL){
     
     if(errmsg==0)  printf("\n\nERROR !(SetVariableByName): variable with name [%s] requested can not be found\n\n",vname);
    return;
    //    return -1000.;
  }
   return ptr_1->Set(__val);
}
//=================================================================================
Int_t            TCTContainer::ConstructVectors()
{
  TString        _exp;
  int sign;
  Int_t  nobj = fVectorArray->GetEntries();
  TCTGenParticle  *part_ptr;

  for(int i=0;i<nobj;i++){
    TCTVector *ptr = (TCTVector *) fVectorArray->At(i);
    _exp = ptr->GetOperation();
    int n_operands = fStrUtils.GetParNumber(_exp.Data());
    for(int jj=0;jj<n_operands;jj++){
      part_ptr = GetParticleByName(fStrUtils.GetParName(_exp.Data(),jj).Data());
      sign   = fStrUtils.GetParSign(_exp.Data(),jj);
      fVectBuff[jj] = sign*part_ptr->Vect();
    }
    ptr->Construct(fVectBuff,n_operands);
  }
  return 1;
}
//=================================================================================
Int_t            TCTContainer::ConstructCompositeParticle(TCTCompositeParticle *cp_part)
{
  TString        _exp;
  _exp = cp_part->GetOperator();
  int n_operands = fStrUtils.GetParNumber(_exp.Data());
  int sign;
  TCTGenParticle  *part_ptr;

  for(int jj=0;jj<n_operands;jj++){
    part_ptr = GetParticleByName(fStrUtils.GetParName(_exp.Data(),jj).Data());
    if(part_ptr==NULL){
	printf("\n\nERROR: ConstructComposite:: Particle [%s] doesn not exist. So construction of [%s] is incomplete\n\n\n",fStrUtils.GetParName(_exp.Data(),jj).Data(),cp_part->GetName());
	return -1;
    }
    sign   = fStrUtils.GetParSign(_exp.Data(),jj);
    fVectBuff[jj] = sign*part_ptr->Vect();
    fVertBuff[jj] = part_ptr->Vert();
  }
  cp_part->Construct(fVectBuff,fVertBuff,n_operands);
  return 1;
}
Int_t            TCTContainer::GetStatus(const char *_system)
{
  Int_t   _N_Part      = GetNParticles();
  for(int idx = 0;idx<_N_Part;idx++){
    TCTGenParticle *_p_ptr = GetParticleByIndex(idx);
    if(_p_ptr->GetStatus()<0) return -1;
  }
  return 1;
}
Int_t            TCTContainer::GetStatusVariables()
{
  return 1;
}

Int_t            TCTContainer::ConstructParticles()
{
  return 1;
}

Int_t            TCTContainer::ConstructComposite()
{
  //  TLorentzVector lv[10];
  TString        _exp;
  Int_t  nobj = fCompositeParticleArray->GetEntries();
  TCTGenParticle  *part_ptr;
  for(int i=0;i<nobj;i++){
    TCTCompositeParticle *ptr = (TCTCompositeParticle *) fCompositeParticleArray->At(i);
    _exp = ptr->GetOperator();
    int n_operands = fStrUtils.GetParNumber(_exp.Data());
    int sign;
    for(int jj=0;jj<n_operands;jj++){
      part_ptr = GetParticleByName(fStrUtils.GetParName(_exp.Data(),jj).Data());
      if(part_ptr==NULL){
	printf("\n\nERROR: ConstructComposite:: Particle [%s] doesn not exist. So construction of [%s] is incomplete\n\n\n",fStrUtils.GetParName(_exp.Data(),jj).Data(),ptr->GetName());
	break;
      }
      sign   = fStrUtils.GetParSign(_exp.Data(),jj);
      fVectBuff[jj] = sign*part_ptr->Vect();
      fVertBuff[jj] = part_ptr->Vert();
    }
    ptr->Construct(fVectBuff,fVertBuff,n_operands);
  }

  return 1;
}

Int_t            TCTContainer::ConstructVariables()
{
  TCTGenParticle  *ptr_part;
  TCTVector       *ptr_vect;
  TCTVariable     *ptr_var;
  Int_t  nobj = fVariableArray->GetEntries();

  for(int i=0;i<nobj;i++){
    ptr_var = static_cast<TCTVariable*> (fVariableArray->At(i));
    if(ptr_var->GetType()==CTVAR_STATIC) continue;
    ptr_part = GetParticleByName(ptr_var->GetSystemName().Data());
    if(ptr_part==NULL){
      ptr_vect = GetVectorByName(ptr_var->GetSystemName().Data());
      if(ptr_vect!=NULL){
	ptr_var->Set(ptr_vect->Get(ptr_var->GetSystemVar().Data()));
      } else {
	printf("ERROR: Object (%s) can not be found\n",ptr_var->GetSystemName().Data());
	return -1;
      }
    } else {
      ptr_var->Set(ptr_part->Get(ptr_var->GetSystemVar().Data()));
    }
  }

  for(int i=0;i<nobj;i++){
    ptr_var = static_cast<TCTVariable*> (fVariableArray->At(i));
    if(ptr_var->GetStatus()<0) return -1;
  }

  return 1;
}
//=================================================================================
TString           TCTContainer::GetVariableString(const char *format)
{
  TString  fBR;
  char  linebuff[128];
  Int_t  nvar_cont = fVariableArray->GetEntries();
  for(int iv = 0; iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVariableArray->At(iv));
    sprintf(linebuff,format,Ptr_Variable->Get());
    fBR += linebuff;
  }
  return fBR;
}

TString           TCTContainer::GetVariableList()
{
  TString  fBR;
  Int_t  nvar_cont = fVariableArray->GetEntries();
  if(nvar_cont==0) return fBR;
  TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVariableArray->At(0));
  fBR += Ptr_Variable->GetName();
  for(int iv = 1; iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVariableArray->At(iv));
    fBR += ":"; fBR += Ptr_Variable->GetName();
  }
  return fBR;
}
//=================================================================================
void              TCTContainer::GetVariableBuff(TArrayF *fBuff)
{
  Int_t  nvar_cont = fVariableArray->GetEntries();
  if(fBuff->GetSize()<nvar_cont) fBuff->Set(nvar_cont);
  for(int iv = 0; iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVariableArray->At(iv));
    fBuff->AddAt((float) Ptr_Variable->Get(),iv);
  }
}

void             TCTContainer::_XML_LoadParticles( XMLNodePointer_t node)
{
  TString  fPartName, fPartPdgName;
  XMLNodePointer_t  child = fXMLEngine.GetChild(node);
  if(child==0) return;
  while(child!=NULL){
    XMLAttrPointer_t attr = fXMLEngine.GetFirstAttr(child);
    const char* content   = fXMLEngine.GetNodeContent(child);
    //    printf("==>> %s %s %s \n",fXMLEngine.GetAttrName(attr),fXMLEngine.GetAttrValue(attr),content);
    fPartName    = fXMLEngine.GetAttr(child,"name"); //fXMLEngine.GetAttrValue(attr);
    fPartPdgName = fXMLEngine.GetAttr(child,"pdgname");
    printf("%s %s \n",fPartName.Data(),fPartPdgName.Data());
    if(fPartName.Length()>1&&fPartPdgName.Length()>1)
      AddParticle(fPartName.Data(),fPartPdgName.Data());
    child = fXMLEngine.GetNext(child);
  } TString  f_n,f_f,f_m;
}

void              TCTContainer::_XML_LoadVariables( XMLNodePointer_t node)
{
  TString  f_n,f_s,f_v,v_min,v_max;
  XMLNodePointer_t  child = fXMLEngine.GetChild(node);
  if(child==0) return;
  while(child!=NULL){
    f_n = fXMLEngine.GetAttr(child,"name");
    f_s = fXMLEngine.GetAttr(child,"particle");
    f_v = fXMLEngine.GetAttr(child,"system");
    v_min = fXMLEngine.GetAttr(child,"min");
    v_max = fXMLEngine.GetAttr(child,"max");
    if(f_n.Length()>0&&f_s.Length()>0&&f_v.Length()>0)
      AddVariable(f_n.Data(),f_s.Data(),f_v.Data());
    if(v_min.Length()>0&&v_max.Length()>0){
      SetVariableCuts(f_n.Data(),v_min.Atof(),v_max.Atof());
    }
    child = fXMLEngine.GetNext(child);
  }
}
void              TCTContainer::_XML_LoadComposite( XMLNodePointer_t node)
{
  TString  f_n,f_f,f_m;
  XMLNodePointer_t  child = fXMLEngine.GetChild(node);
  if(child==0) return;
  while(child!=NULL){
    f_n = fXMLEngine.GetAttr(child,"name");
    f_f = fXMLEngine.GetAttr(child,"formula");
    f_m = fXMLEngine.GetAttr(child,"mass");
    if(f_n.Length()>1&&f_f.Length()>1){
      AddCompositeParticle(f_n.Data(),f_f.Data(),f_m.Atof());
    }
    child = fXMLEngine.GetNext(child);
  }
}
void              TCTContainer::_XML_LoadVectors( XMLNodePointer_t node)
{
  TString  f_n,f_f;
  XMLNodePointer_t  child = fXMLEngine.GetChild(node);
  if(child==0) return;
  while(child!=NULL){
    f_n = fXMLEngine.GetAttr(child,"name");
    f_f = fXMLEngine.GetAttr(child,"formula");
    if(f_n.Length()>1&&f_f.Length()>1)
      AddVector(f_n.Data(),f_f.Data());
    child = fXMLEngine.GetNext(child);
  }
}


void             TCTContainer::LoadXMLConfig(const char *_xml_file)
{

  XMLDocPointer_t  xmldoc = fXMLEngine.ParseFile(_xml_file);
  if(xmldoc==0){
    printf("Failed to Parse XML File %s\n",_xml_file);
    return;
  }

  ClearAll();
  XMLNodePointer_t  mainnode = fXMLEngine.DocGetRootElement(xmldoc);

  XMLNodePointer_t  child = fXMLEngine.GetChild(mainnode);

  while(child!=NULL){
    // _XML_LoadParticles(child);    
    TString   fNodeName = fXMLEngine.GetNodeName(child);
    if(fNodeName.CompareTo("Particles")==0) _XML_LoadParticles(child);
    if(fNodeName.CompareTo("CompositeParticles")==0) _XML_LoadComposite(child);
    if(fNodeName.CompareTo("Variables")==0) _XML_LoadVariables(child);
    if(fNodeName.CompareTo("Vectors")==0) _XML_LoadVectors(child);
    //    printf("Found Node %s\n",fXMLEngine.GetNodeName(child));
    child = fXMLEngine.GetNext(child);
  }

  fXMLEngine.FreeDoc(xmldoc);
}


void             TCTContainer::SaveXMLConfig(const char *_xml_file)
{
}
void             TCTContainer::SaveConfig(const char *_cfg_file)
{
  char      flbuff[1024];
  ofstream  of_cfg(_cfg_file);


  of_cfg << "#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" << endl;
  of_cfg << "# Configuration file To be used with EventSelector" << endl;
  of_cfg << "# Modify it at your own risk " << endl;
  of_cfg << "#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" << endl;
  int  n_obj = fParticleArray->GetEntries();
  TCTGenParticle   *ptr_beam = GetParticleByName("beam");
  TCTGenParticle   *ptr_targ = GetParticleByName("target");
  
  TParticlePDG *fpart = fPDGData.GetParticle(ptr_beam->GetPdgId());
  sprintf(flbuff,"reaction/set %s:%s",ptr_beam->GetPdgName(),ptr_targ->GetPdgName());
  of_cfg << flbuff << endl;


  //------------------------
  //  Saving Particles
  //------------------------

  of_cfg << "#------------------------" << endl;
  of_cfg << "# particle definitions " <<endl;;
  of_cfg << "#------------------------" << endl;

  for(int i=0;i<n_obj;i++){
    TCTGenParticle *ptr_part =  (static_cast<TCTGenParticle*> (fParticleArray->At(i)));
    TString         p_name   = ptr_part->GetName();
    if(p_name.CompareTo("beam")!=0&&p_name.CompareTo("target")!=0){
      sprintf(flbuff,"particle/add/new %s %s",p_name.Data(),ptr_part->GetPdgName());
      of_cfg << flbuff << endl;
    }
  }
  //------------------------
  //  Saving Particles
  //------------------------
  of_cfg << "#------------------------" << endl;
  of_cfg << "# composite particle definitions " <<endl;;
  of_cfg << "#------------------------" << endl;

  n_obj = fCompositeParticleArray->GetEntries();
  for(int i=0;i<n_obj;i++){
    TCTCompositeParticle *ptr_cpart =  (static_cast<TCTCompositeParticle*> (fCompositeParticleArray->At(i)));
    TString   fm_op = "C";
    if( ptr_cpart->GetPdgMassFlag()>0) fm_op = "F";
    sprintf(flbuff,"particle/add/composite %s %s %.5f %s",ptr_cpart->GetName(),
	    ptr_cpart->GetOperator().Data(),ptr_cpart->GetPdgMass(),
	    fm_op.Data());
    of_cfg << flbuff << endl;
  }

  

  of_cfg << "#------------------------" << endl;
  of_cfg << "# Vector definitions " <<endl;;
  of_cfg << "#------------------------" << endl;

  n_obj = fVectorArray->GetEntries();
  for(int i=0;i<n_obj;i++){
    TCTVector *ptr_var = (TCTVector *) fVectorArray->At(i);
    sprintf(flbuff,"vector/add/new %s %s",ptr_var->GetName(),
	    ptr_var->GetOperation().Data());
    of_cfg << flbuff << endl;
  }

  of_cfg << "#------------------------" << endl;
  of_cfg << "# Variable definitions " <<endl;;
  of_cfg << "#------------------------" << endl;

  n_obj = fVariableArray->GetEntries();
  for(int i=0;i<n_obj;i++){
    TCTVariable *ptr_var = (TCTVariable *) fVariableArray->At(i);
    sprintf(flbuff,"variable/add/new %s %s %s",ptr_var->GetName(),
	    ptr_var->GetSystemName().Data(),
	    ptr_var->GetSystemVar().Data());
    of_cfg << flbuff << endl;
    double   cut_l,cut_h;
    ptr_var->GetCuts(&cut_l,&cut_h);
    if(cut_l>-1000.&&cut_h<1000.){
      sprintf(flbuff,"variable/set/cuts %s %.4f %.4f",ptr_var->GetName(),
	      cut_l,cut_h);
      of_cfg << flbuff << endl;
    }
  }
  of_cfg << "#------------------------" << endl;
  of_cfg << "# VEnd of definitions " <<endl;;
  of_cfg << "#------------------------" << endl;

  of_cfg.close();
}
void             TCTContainer::LoadConfig(const char *_cfg_file)
{
  char   flbuff[1024];
  ifstream  if_cfg(_cfg_file);
  ClearAll();
  while(!if_cfg.eof()){
    if_cfg.getline(flbuff,1024);
    EvaluateCommand(flbuff);
  }
  if_cfg.close();
}

//=================================================================================
// Print out configuration
//=================================================================================
void   TCTContainer::ClearAll()
{
  fParticleArray->Delete();
  fCompositeParticleArray->Delete();
  fVectorArray->Delete();
  fVariableArray->Delete();
}
//=================================================================================
void      TCTContainer::PrintParticle(const char *_pname)
{
  TCTGenParticle  *_ptr_p = GetParticleByName(_pname);
  if(_ptr_p!=NULL){
    _ptr_p->PrintVect();
  }
}

void   TCTContainer::Print(const char *opt)
{
  TString lopt = opt;
  int nobj;
  if(lopt.Contains("P")){
    nobj = fParticleArray->GetEntries();
    printf("\n\n");
    printf("+------------+------------+------------+------------+------------+\n");
    printf("|       Particle Array                 |\n");
    printf("+------------+------------+------------+------------+------------+\n");
    printf("|%12s|%12s|%12s|\n","name","pdg ID","mass");
    printf("+------------+------------+------------+------------+------------+\n");
    
    for(int i=0;i<nobj;i++){
      TCTGenParticle *ptr = (TCTGenParticle *) fParticleArray->At(i);
      ptr->Print();
    }
    
    printf("+------------+------------+------------+------------+------------+\n");
  }

  if(lopt.Contains("C")){
    nobj = fCompositeParticleArray->GetEntries();
    printf("\n\n");
    printf("+------------+------------+----------------------------------+------------+------------+\n");
    printf("|    Composite  Particle Array                               |\n");
    printf("+------------+------------+----------------------------------+------------+------------+\n");
    printf("|%12s|%12s|%34s|\n","name","mass","expresion");
    printf("+------------+------------+----------------------------------+------------+------------+\n");
    
    for(int i=0;i<nobj;i++){
      TCTCompositeParticle *ptr = (TCTCompositeParticle *) fCompositeParticleArray->At(i);
      ptr->Print();
    }
    
    printf("+------------+------------+----------------------------------+------------+------------+\n");
  }
  if(lopt.Contains("V")){
    nobj = fVariableArray->GetEntries();
    printf("\n\n");
    printf("+------------+------------+------------+------------+------------+------------+\n");
    printf("|    Variables                                                                |\n");
    printf("+------------+------------+------------+------------+------------+------------+\n");
    printf("|%12s|%12s|%12s|%12s|%12s|%12s|\n","name","system","subsystem","value","min","max");
    printf("+------------+------------+------------+------------+------------+------------+\n");
    
    for(int i=0;i<nobj;i++){
      TCTVariable *ptr = (TCTVariable *) fVariableArray->At(i);
      ptr->Print();
    }
    printf("+------------+------------+------------+------------+------------+------------+\n");
  }

  if(lopt.Contains("D")){
    nobj = fVectorArray->GetEntries();
    for(int i=0;i<nobj;i++){
      TCTVector *ptr = (TCTVector *) fVectorArray->At(i);
      ptr->Print();
    }
  }
  
}

int        TCTContainer::EvaluateCommand(const char *__cmd)
{
  TString  line_full   = __cmd;
  int      fCmdClaimed = 0;
  TString  line_cmd    = fStrUtils.PullStr(&line_full);
  TString  sys_cmd     = fStrUtils.PullStr(&line_cmd,'/');
  //  printf("Executing =>> [%s] -> [%s]\n",sys_cmd.Data(),line_cmd.Data());
  //----------------------------------------------------------------
  // this section is for particle commands
  //----------------------------------------------------------------
  if(sys_cmd.CompareTo("particle")==0){
    if(line_cmd.CompareTo("add/new")==0){
      //  printf("Arguments: [%s] [%s]\n",fStrUtils.GetToken(line_full.Data(),0,' ').Data(),
      //	     fStrUtils.GetToken(line_full.Data(),1,' ').Data());

      AddParticle(fStrUtils.GetToken(line_full.Data(),0,' ').Data(),
		  fStrUtils.GetToken(line_full.Data(),1,' ').Data());
      fCmdClaimed = 1;
    }

    if(line_cmd.CompareTo("add/composite")==0){
      double  _pmass  = fStrUtils.GetToken(line_full.Data(),2,' ').Atof();
      TString MflagS  = fStrUtils.GetToken(line_full.Data(),3,' ');
      int     MflagI  = -1;
      if(MflagS.CompareTo("F")==0) MflagI = 1;
      AddCompositeParticle(fStrUtils.GetToken(line_full.Data(),0,' ').Data(),
			   fStrUtils.GetToken(line_full.Data(),1,' ').Data(),
			   _pmass,MflagI);
      fCmdClaimed = 1;
    }
      
  }
  //----------------------------------------------------------------
  if(fCmdClaimed>0) return fCmdClaimed;
  
  //----------------------------------------------------------------
  // this section is for variable commands
  //----------------------------------------------------------------
   if(sys_cmd.CompareTo("variable")==0){
    if(line_cmd.CompareTo("add/new")==0){
      AddVariable(fStrUtils.GetToken(line_full.Data(),0,' ').Data(),
		  fStrUtils.GetToken(line_full.Data(),1,' ').Data(),
		  fStrUtils.GetToken(line_full.Data(),2,' ').Data());
      
    }

    if(line_cmd.CompareTo("set/cuts")==0){
      SetVariableCuts(fStrUtils.GetToken(line_full.Data(),0,' ').Data(),
		  fStrUtils.GetToken(line_full.Data(),1,' ').Atof(),
		  fStrUtils.GetToken(line_full.Data(),2,' ').Atof());
    }
    
   }
   
   //---------------------------------------------------------------------
   if(sys_cmd.CompareTo("reaction")==0){
     if(line_cmd.CompareTo("set")==0){
       SetReaction(fStrUtils.GetToken(line_full.Data(),0,' ').Data());
     }
   }

  if(sys_cmd.CompareTo("vector")==0){
     if(line_cmd.CompareTo("add/new")==0){
       AddVector(fStrUtils.GetToken(line_full.Data(),0,' ').Data(),
		 fStrUtils.GetToken(line_full.Data(),1,' ').Data());
     }
   }

   return  fCmdClaimed;
}

