// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Fri Mar 30 10:47:42 EST 2007
//

#include "TGuiStudio.h"

const Char_t *filetypes_gui[] = {
    "Config Files",    "*.cfg",
    "Config Files",   "*.Conf",
    "EPS File", "*.eps",
    "All files",     "*",
    0,               0
};

enum  RootClasToolStudioEvent{
  C_FILE_NEW,
  C_FILE_OPEN,
  C_FILE_CLOSE,
  C_FILE_SAVE,
  C_FILE_EXIT,
  C_ABOUT,
  C_PRINT_PROJECT,
  C_PRINT_CUTS,
  C_PRINT_HISTOS,
  C_SAVE_HISTO,
  C_SAVE_AS_HISTO
};


TGuiStudio      *gGuiStudio;

ClassImp(TGuiStudio)


TGuiStudio::TGuiStudio (const TGWindow *p, UInt_t w, UInt_t h)
:TGMainFrame(p, w, h)
{


  //  gROOT->SetStyle("Pub");
  fTitleView = new TFrameTitle(this,"CLAS Tool  Studio");

  fSelectionFrame = new TGCompositeFrame(this, 100, 100, kHorizontalFrame);

  fFrContainer = new TFrameContainer(fSelectionFrame,this,2,3,4);

  fTabView = new TFrameTabView(fSelectionFrame);
  
  
  fSelectionFrame->AddFrame(fTabView,new TGLayoutHints(kLHintsExpandX |kLHintsExpandY, 0, 0, 0, 0));
  fSelectionFrame->AddFrame(fFrContainer, new TGLayoutHints(kLHintsExpandY, 0,2,2,2));

  MakeMenuBar();

  //  AddFrame(fMenuBar, new TGLayoutHints(kLHintsTop ,2,2,2,2));
  AddFrame(fTitleView, new TGLayoutHints(kLHintsTop | kLHintsExpandX, 0, 0, 0, 0));

  AddFrame(fSelectionFrame, new TGLayoutHints( kLHintsExpandY|kLHintsExpandX, 0, 0, 0, 0));

  Int_t parts[] = {45, 45, 10};
  fStatusBar = new TGStatusBar(this, 50, 10, kHorizontalFrame);
  fStatusBar->SetParts(parts, 3);
  AddFrame(fStatusBar, new TGLayoutHints(kLHintsBottom| kLHintsExpandX, 0, 0, 0, 0) );

  //  fFrNtUtils->Init("nt","/scratch/WORK/PentaQuark_N/data_ntuple_mar_28.root");

  SetWindowName("CLASTool Studio/NTuple Tools");

  MapSubwindows();
  Resize(GetDefaultSize());
  MapWindow();
  //  Show();
  gGuiStudio = this;

  fEventSelector.SetReader(&fDSTReader);
  //  fEventSelector.SetContainer(&fContainer);
  //  fEventSelector.SetBeamSelector(&fBeamSelector);

}

TGuiStudio::~TGuiStudio (){

}

//-----------------
//-----------------
void   TGuiStudio::InitFile(const char *_file_pattern)
{
  fDSTReader.Add(_file_pattern);
}
//-----------------
void    TGuiStudio::LoadProject(const char *prj_name)
{
  //  fFrNtUtils->OpenProject(prj_name);
}

void    TGuiStudio::Draw(const char *_var_name, const char *_var_condition)
{
  ActivateCanvas();
  fEventSelector.Draw(_var_name);
  UpdateCanvas();
}

void    TGuiStudio::Run(int n_events)
{
  //  printf("Running EventSelector %d events\n",n_events);


  fTabView->ActiveTab(2);
  
  fEventSelector.Run(n_events,0,fTabView->GetProgressBar());
  printf("Finished the run...\n");
}

void    TGuiStudio::LoadFromXML(const char *_xml_file)
{
  fEventSelector.LoadXMLConfig(_xml_file);
  fEventSelector.Print();
  fFrContainer->UpdateFrame(fEventSelector.GetEventContainer());
  fEventSelector.Init();
  int  n_evt = fDSTReader.GetTree()->GetEntries();
  fFrContainer->SetSliderRange(0,n_evt,(int) (n_evt*0.2));  
  fFrContainer->_cmd_ChangeNEvents();
}

void    TGuiStudio::AddMessage(const char *mess)
{
  //  printf("TGUISTUDIO: Message center\n");
  fTabView->AddMessage(mess);
}

void    TGuiStudio::MakeMenuBar()
{

  TGLayoutHints    *fMenuBarLayout = new TGLayoutHints( kLHintsLeft | kLHintsExpandX ,
                     0, 0, 0, 0);
  TGLayoutHints    *fMenuBarItemLayout = new TGLayoutHints(kLHintsTop | kLHintsLeft, 0, 4, 0, 0);
  TGLayoutHints    *fMenuBarHelpLayout = new TGLayoutHints(kLHintsTop | kLHintsRight);

  fMenuBar = new TGMenuBar(this, 1, 1, kHorizontalFrame | kRaisedFrame);
  fMenuFile = new TGPopupMenu(gClient->GetRoot());
  fMenuFile->AddEntry("&New Project ", C_FILE_NEW);
  fMenuFile->AddEntry("&Open Project ", C_FILE_OPEN);
  fMenuFile->AddEntry("&Close Project ", C_FILE_OPEN);
  fMenuFile->AddEntry("&Save Project ", C_FILE_OPEN);
  fMenuFile->AddEntry("&Exit... ", C_FILE_EXIT);
  fMenuFile->Associate(this);

  fMenuTools = new TGPopupMenu(gClient->GetRoot());
  fMenuTools->AddLabel("Printf Config");
  fMenuTools->AddSeparator();
  fMenuTools->AddEntry("Print Project", C_PRINT_PROJECT);
  fMenuTools->AddEntry("Print Cuts", C_PRINT_CUTS);
  fMenuTools->AddEntry("Print Histos", C_PRINT_HISTOS);
  fMenuTools->Associate(this);


  fMenuPrint = new TGPopupMenu(gClient->GetRoot());
  fMenuPrint->AddLabel("Print Histograms");

  fMenuPrint->AddSeparator();
  fMenuPrint->AddEntry("Save Canvas", C_SAVE_HISTO);
  fMenuPrint->AddEntry("Save Ntuple", C_SAVE_AS_HISTO);

  fMenuPrint->Associate(this);

  fMenuHelp = new TGPopupMenu(gClient->GetRoot());
  fMenuHelp->AddEntry("&About", C_ABOUT);
   
  fMenuBar->AddPopup("&File", fMenuFile, fMenuBarItemLayout);
  fMenuBar->AddPopup("&Tools", fMenuTools, fMenuBarItemLayout);
  fMenuBar->AddPopup("&Print", fMenuPrint, fMenuBarItemLayout);
  
  fMenuBar->AddPopup("&About", fMenuHelp, fMenuBarHelpLayout);
 
  //  fMenuBar->Resize(150,50);

  AddFrame(fMenuBar, fMenuBarLayout);
}

void    TGuiStudio::ActivateCanvas()
{
   fTabView->ActivateCanvas();
}
void    TGuiStudio::UpdateCanvas()
{
  fTabView->UpdateCanvas();
}


Bool_t   TGuiStudio::ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2)
{
    Int_t Selection;
  Int_t retval;
  //  printf("processing message\n");
  switch (GET_MSG(msg)) {
     case kC_COMMAND:
       switch (GET_SUBMSG(msg)) {
            case kCM_MENU:
	      switch (parm1) {
	      case C_FILE_OPEN:
		printf("command: Open File\n");
		break;
	      case C_SAVE_HISTO:
		printf("command: Save Histo\n");
		SaveHist();
		break;
	      case C_SAVE_AS_HISTO:
		printf("command: Save Histo\n");
		//SaveAsCanvas();
		_cmd_SaveNtuple();
		break;
	      }
       }
  }
}

void    TGuiStudio::_cmd_SaveNtuple()
{
  fEventSelector.SaveNtuple();
}
void    TGuiStudio::SaveHist()
{
  //  fTabView->PrintCanvas( fFrNtUtils->GetFigureName().Data());
}

void    TGuiStudio::PrintCanvas(const char *name)
{
  fTabView->PrintCanvas( name);
}
void    TGuiStudio::SaveAsCanvas()
{
   TGFileInfo fi;
    fi.fFileTypes = filetypes_gui;
    new TGFileDialog(fClient->GetRoot(), this, kFDOpen,&fi);
    if (!fi.fFilename) return;
    fTabView->PrintCanvas(fi.fFilename);
}

