// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Tue Mar 27 12:58:44 EST 2007
//

#include "TCTEventSelector.h"


TCTEventSelector::TCTEventSelector (){
  fPartArray = new TObjArray(5);
  fCompositePartArray = new TObjArray(5);
  fVectArray = new TObjArray(5);
  fVarArray  = new TObjArray(5);
  fInteRactionVertex_Indx = -1;
}

//***************************************************************
//***************************************************************
//***************************************************************

TCTEventSelector::~TCTEventSelector ()
{

}
//***************************************************************
//***************************************************************
//***************************************************************
void  TCTEventSelector::SetReaction(const char *react, const char *products)
{

  fReaction = react;
  vl_React[1].SetPxPyPzE(0.,0.,0.,0.938);

  AddParticle("photon",22,0.);
  AddParticle("target",2212,0.93827);
  AddVariable("gtime",0.);
  AddVariable("eg",   0.);
  AddVariable("EID",   0.);

  AddVariable("RunNum",0.);
  AddVariable("EvtNum",0.);

  TLorentzVector  vT(0.,0.,0.,0.938);
  
  TCTParticle *ptr_part = (TCTParticle *) fPartArray->At(1);
  ptr_part->SetVector(vT);
  ptr_part->SetStatus(1);

  TCTStringUtils  fSu ;
  TString   Str_arg = products;

  
  while(Str_arg.Length()>0){
    TString  pname = fSu.PullStr(&Str_arg,':');
    TParticlePDG *fpart = fPDGData.GetParticle(pname.Data());
    if(fpart!=NULL){
      printf("adding particle %s : mass =>> %f (%d)\n",pname.Data(),fpart->Mass(),fpart->PdgCode());
      AddParticle(pname.Data(),fpart->PdgCode(),fpart->Mass());
    } else {
      printf("\n-\nERROR: unrecognized particle name (%s)\n\n",pname.Data());
    }
  }
  
}

TLorentzVector  TCTEventSelector::GetLorentzVector(const char *partname)
{
  TLorentzVector  vL(0.,0.,0.,0.);
  TParticlePDG *fpart = fPDGData.GetParticle(partname);
  Int_t nrow_part = fReader->GetNRows("EVNT");

  for(int jj=0;jj<nrow_part;jj++){
    if(fReader->GetPartID(jj)==fpart->PdgCode()){
      TVector3 v3 = fReader->GetPart3Vector(jj);
      vL.SetVectM(v3,fpart->Mass());
      return vL;
    }
  }
  return vL;
}

int    TCTEventSelector::Pattern(const char *__str_pat, int excl_flag_ch , int excl_flag_neutral)
{
  TString         fpattern = __str_pat;
  TCTStringUtils  fSu;
  int             _t_count = fSu.GetCount(fpattern,':');
  TArrayI         fpartID(_t_count+1);
  TString         fpartName;
  for(int i=0;i<_t_count+1;i++){
    fpartName = fSu.PullStr(&fpattern,':');
    TParticlePDG *fpart = fPDGData.GetParticle(fpartName.Data());
    if(fpart==NULL){
      printf("\n-\nERROR: unrecognized particle name (%s)\n\n",fpartName.Data());
    } else {
      fpartID.AddAt(fpart->PdgCode(),i);
    }
    //printf("%d -->> %d\n",i,fpartID.At(i));
  }

  TArrayI   fpartcount(_t_count+1);
  Int_t     fCharged_Unclaimed = 0;
  Int_t     fNeutral_Unclaimed = 0;

  for(int kk=0;kk<_t_count+1;kk++) fpartcount.AddAt(0,kk);

  Int_t nrow_part = fReader->GetNRows("EVNT");

  for(int jj=0;jj<nrow_part;jj++){
    int  _p_claim = 0;
    for(int kk=0;kk<_t_count+1;kk++){
      if(fpartcount.At(kk)==0){
	if(fpartID.At(kk)==fReader->GetPartID(jj)){
	  fpartcount.AddAt(1,kk);
	  _p_claim = 1;
	}
      }
    }

    if(_p_claim==0){
      if(fReader->GetPartCharge(jj)==0){
	fNeutral_Unclaimed++;
      } else {
	fCharged_Unclaimed++;
      }
    }
  }

  Int_t   status_flag = 1;
  for(int kk=0;kk<fpartcount.GetSize();kk++) if(fpartcount.At(kk)==0) status_flag = -1;

  if(excl_flag_ch>-1){
    if(fCharged_Unclaimed!=excl_flag_ch) status_flag = -1;
  }
  if(excl_flag_neutral>-1){
    if(fNeutral_Unclaimed!=excl_flag_neutral) status_flag = -1;
  }

  return status_flag;
}
//-----------------
//-----------------
//-----------------
TVector3  TCTEventSelector::GetInterVertex()
{
  int n_rows = fPartArray->GetEntries();
  TVector3  fres(0.,0.,0.);

  if(fInteRactionVertex_Indx<0||fInteRactionVertex_Indx>=n_rows){
    printf("WARRNING: The interaction Vertex has not been set.....\n");
    printf("\t Use: TCTEventSelector::SetInterVertex( int index) method to set vertex\n\n");
    return fres;
  }
  TCTParticle *ptr = (TCTParticle *) fPartArray->At(fInteRactionVertex_Indx);
  if(ptr==NULL) return fres;
  fres = ptr->GetVert();
  return fres;
}
//***************************************************************
void  TCTEventSelector::AddParticle(const char *name, int type, double mass)
{
  fPartArray->AddLast(new TCTParticle(name,type,mass));
}
//***************************************************************
//***************************************************************
//***************************************************************
void  TCTEventSelector::AddCompositeParticle(const char *name, int p1, int p2,double __mass,double pid_cut)
{
  fCompositePartArray->AddLast(new TCTCompositeParticle(name,p1,p2, __mass,pid_cut));
}

void  TCTEventSelector::AddCompositeParticle(const char *name, const char *__fop,double __mass,double pid_cut)
{
  fCompositePartArray->AddLast(new TCTCompositeParticle(name,__fop, __mass,pid_cut));
}


void  TCTEventSelector::PrintPart()
{
  int nobj = fPartArray->GetEntries();
  int nobjc = fCompositePartArray->GetEntries();

  printf("----------  PART ARRAY -------------\n");
  for(int i=0;i<nobj;i++){
    TCTParticle *ptr = (TCTParticle *) fPartArray->At(i);
    printf("%15s | %5d | %9.5f | id = %d\n",ptr->GetName(),ptr->GetType(),ptr->GetMass(),i);
  }
  printf("------------------------------------\n\n"); 
  printf("----------  Composite PART ARRAY -------------\n");
  for(int i=0;i<nobjc;i++){
    TCTCompositeParticle *ptr = (TCTCompositeParticle *) fCompositePartArray->At(i);
    printf("%15s | %5d | %5d | id = %d\n",ptr->GetName(),ptr->GetP1(),ptr->GetP2(),i);
  }
  printf("------------------------------------\n\n"); 
  
}
void   TCTEventSelector::ConstructComposite()
{
  Int_t nrow_cpart = fCompositePartArray->GetEntries();
 for(int jj=0;jj<nrow_cpart;jj++){
   TCTCompositeParticle *ptr_part = (TCTCompositeParticle *) fCompositePartArray->At(jj);
   
   Int_t  n_parts = ptr_part->GetNPart();
   // For 2 particle system We construct it this way in order to
   // get the doca and interaction point for the particle
   if(n_parts==2){
     int  idx1 = ptr_part->GetP(0);
     int  idx2 = ptr_part->GetP(1);
     TCTParticle *ptr_p1 = (TCTParticle *) fPartArray->At(idx1);
     TCTParticle *ptr_p2 = (TCTParticle *) fPartArray->At(idx2);
     if(ptr_p1!=NULL&&ptr_p2!=NULL){
       ptr_part->SetInterVector(GetInterVertex());
       ptr_part->Construct(*ptr_p1,*ptr_p2);
     }else {printf("ERROR: with element in composite particle array\n");}
   } else {
   // This version with more than 2 particles is used for missing mass
   // and other things.....
     int  idx1 = ptr_part->GetP(0);
     TCTParticle *ptr_p1 = (TCTParticle *) fPartArray->At(idx1);
     if(ptr_p1==NULL){
       printf("ERROR in indexing....with particle %d\n",jj);
       continue;
     }

     TLorentzVector vL1 = ptr_p1->GetV();
     for(int kk=1;kk<n_parts;kk++){
       int idx5 = ptr_part->GetP(kk);
       int sign = ptr_part->GetSign(kk);
       TCTParticle *ptr_p5 = (TCTParticle *) fPartArray->At(idx5);
       if(sign>0){
	 vL1 = vL1 + ptr_p5->GetV();
       } else {vL1 = vL1 - ptr_p5->GetV();};
     }
     ptr_part->SetVector(vL1);
   }
 }

}
int  TCTEventSelector::AnalyseEvent()
{


  if(fPhotonSel.GetNGTime(1.5)!=1) return -1;

  fPhotonSel.FindBestPhoton();

  TCTParticle *ptr_part = (TCTParticle *) fPartArray->At(0);
  TLorentzVector vG(0.,0.,fPhotonSel.GetE(),fPhotonSel.GetE());
  //  printf("%f\n",fPhotonSel.GetE());

  SetVar("gtime",fPhotonSel.GetDT());
  SetVar("eg",fPhotonSel.GetE());
  SetVar("EID",fPhotonSel.GetEID());

  SetVar("RunNum",(double) fReader->GetRunNumber());
  SetVar("EvtNum",(double) fReader->GetEventNumber());



  ptr_part->SetVector(vG);
  ptr_part->SetStatus(1);

  //  return 1;
  //  return 1;
  //  printf( "--- %f\n",ptr_part->GetV().P());

  Int_t nrows     = fReader->GetNPart();

  Int_t nrow_part = fPartArray->GetEntries();

  for(int jj=2;jj<nrow_part;jj++) ((TCTParticle *) fPartArray->At(jj))->ResetPart();

  for(int i=0;i<nrows;i++){
    for(int jj=2;jj<nrow_part;jj++){
      TCTParticle *ptr_part = (TCTParticle *) fPartArray->At(jj);
      if(ptr_part->GetType()==fReader->GetPartID(i)) 
	ptr_part->SetParticle(fReader,i);
    }
  }
  
  //  return 1;

  for(int jj=2;jj<nrow_part;jj++)
    {
      TCTParticle *ptr_part = (TCTParticle *) fPartArray->At(jj);
      //      printf("part %d : %f\n",jj,ptr_part->GetV().P());
      if(ptr_part->Status()!=1) return -1;
    }
  
  Int_t nrow_cpart = fCompositePartArray->GetEntries();

//   for(int jj=0;jj<nrow_cpart;jj++){
//     TCTCompositeParticle *ptr_part = (TCTCompositeParticle *) fCompositePartArray->At(jj);
//     int  idx1 = ptr_part->GetP1();
//     int  idx2 = ptr_part->GetP2();

//     TCTParticle *ptr_p1 = (TCTParticle *) fPartArray->At(idx1);
//     TCTParticle *ptr_p2 = (TCTParticle *) fPartArray->At(idx2);
//     if(ptr_p1!=NULL&&ptr_p2!=NULL){
//       //  printf("%d %d %f %f \n",idx1,idx2,ptr_p1->GetV().P(),ptr_p2->GetV().P());
//       ptr_part->Construct(*ptr_p1,*ptr_p2);
//     }else {printf("ERROR: with element in composite particle array\n");}
//   }
  
  ConstructComposite();

  for(int jj=0;jj<nrow_cpart;jj++){
    TCTCompositeParticle *ptr_part = (TCTCompositeParticle *) fCompositePartArray->At(jj);
    if(ptr_part->GetStatus()<0) return -1;
  }

  FillVariables();
  return 1;
}
//***************************************************************
//***************************************************************
//***************************************************************
TCTParticle            *TCTEventSelector::GetParticle(int idx)
{
  return ((TCTParticle *) fPartArray->At(idx));
}

TCTCompositeParticle   *TCTEventSelector::GetCompositeParticle(int idx)
{
  return ((TCTCompositeParticle *) fCompositePartArray->At(idx));
}

void  TCTEventSelector::PrintVect(int flag)
{
  int nobj = fVectArray->GetEntries();
  printf("----------  VECT ARRAY -------------\n");
  for(int i=0;i<nobj;i++){
    TCTVector *ptr = (TCTVector *) fVectArray->At(i);
    if(flag==0){
      ptr->Print();
    } else {
      ptr->PrintV();
    }
  }
  printf("------------------------------------\n\n"); 
}
//***************************************************************
//***************************************************************

void  TCTEventSelector::FillVariables()
{
  int nobj = fVarArray->GetEntries();
  for(int i=0;i<nobj;i++){
    TCTVariable *ptr = (TCTVariable *) fVarArray->At(i);
    //    sprintf(fLineBuffer,"%s %9.5f ",fLineBuffer,ptr->Get());
    int system_found = 0;
    if(ptr->GetType()==CTVAR_STATIC) continue;
    TString  sys_name = ptr->GetSystemName();
    TString  var_name = ptr->GetSystemVar();
    TCTParticle *Ptr_Vect = static_cast<TCTParticle*> (fPartArray->FindObject(sys_name.Data()));
    if(Ptr_Vect!=NULL){
      ptr->Set(Ptr_Vect->Get(var_name.Data()));
      system_found=1;
    }
    TCTCompositeParticle *Ptr_Vect_C = static_cast<TCTCompositeParticle*> (fCompositePartArray->FindObject(sys_name.Data()));
    if(Ptr_Vect_C!=NULL){
      ptr->Set(Ptr_Vect_C->Get(var_name.Data()));
      system_found=1;
    }

    if(system_found==0){
      printf("FillVariables: ERROR: System %s can not be found\n",sys_name.Data());
    }
  }
}

//***************************************************************
TString   TCTEventSelector::GetVarBuffer()
{
  sprintf(fLineBuffer," ");
  int nobj = fVarArray->GetEntries();
  for(int i=0;i<nobj;i++){
    TCTVariable *ptr = (TCTVariable *) fVarArray->At(i);
    sprintf(fLineBuffer,"%s %9.5f ",fLineBuffer,ptr->Get());
  }
  TString tmp = fLineBuffer;
  return tmp;
}

void  TCTEventSelector::PrintVars()
{
  int nobj = fVarArray->GetEntries();
  printf("----------  VAR ARRAY -------------\n");
  for(int i=0;i<nobj;i++){
    TCTVariable *ptr = (TCTVariable *) fVarArray->At(i);
    ptr->Print();
  }
  printf("------------------------------------\n\n"); 
}

//***************************************************************
//***************************************************************
//***************************************************************

void  TCTEventSelector::AddVector(const char *name,TLorentzVector v)
{
  fVectArray->AddLast(new TCTVector(name,v));
}
//***************************************************************
//***************************************************************
//***************************************************************

void  TCTEventSelector::AddVector(const char *name,const char *part)
{
  fVectArray->AddLast(new TCTVector(name,part));
}
//***************************************************************
//***************************************************************
//***************************************************************

void  TCTEventSelector::AddVector(const char *name,const char *oper, int nop, TString *sarr)
{
  fVectArray->AddLast(new TCTVector(name,oper,"a","b"));
  TCTVector *Ptr_Vect = static_cast<TCTVector*> (fVectArray->FindObject(name));
  if(Ptr_Vect==NULL){
    printf("WARRNING: Vector (%s) is not found\n",name);
    return;
  }

  Ptr_Vect->SetNVect(nop);
  for(int ii=0;ii<nop;ii++) Ptr_Vect->SetOperVect(ii,sarr[ii].Data());
}
//***************************************************************
//***************************************************************
//***************************************************************
//___________
void  TCTEventSelector::AddVariable(Int_t  Type,const char *name,const char *sys_name,const char *sys_var)
{
  fVarArray->AddLast(new TCTVariable(name,sys_name,sys_var));
}
//***************************************************************
//***************************************************************
//***************************************************************
//___________
void  TCTEventSelector::AddVariable(const char *name,double value)
{
  fVarArray->AddLast(new TCTVariable(name,value));
}
//***************************************************************
//***************************************************************
//***************************************************************
//___________________
void  TCTEventSelector::AddVariable(const char *name,const char *oper,const char *var1,const char *var2)
{
  fVarArray->AddLast(new TCTVariable(name,oper,var1,var2));
}
//***************************************************************
//***************************************************************
//***************************************************************
//____________________
void      TCTEventSelector::ExecCommand(const char *sys,const char *cmd, const char *args)
{
  TString  Str_sys = sys;
  TString  Str_cmd = cmd;
  TString  Str_arg = args;
  TString  Str_err = args;
  TString  sbuff[6];

  TCTStringUtils  fSu;
  //____________________ Particle Commands _________________
  if(Str_sys.CompareTo("particle",TString::kIgnoreCase)==0){
    if(Str_cmd.CompareTo("add/new",TString::kIgnoreCase)==0){
      TString prt_name = fSu.PullStr(&Str_arg);
      TString prt_type = fSu.PullStr(&Str_arg);
      TString prt_mass = fSu.PullStr(&Str_arg);
      printf("particle/add/new: %12s %6d  %9.5f\n",prt_name.Data(),prt_type.Atoi(),prt_mass.Atof());
      AddParticle(prt_name.Data(),prt_type.Atoi(),prt_mass.Atof());
    }
  }
  //___________________  Vector Commands ___________________
  if(Str_sys.CompareTo("vector")==0){
    if(Str_cmd.CompareTo("add/new")==0){
      TString prt_name = fSu.PullStr(&Str_arg);
      TString prt_type = fSu.PullStr(&Str_arg);
      printf("vector/add/new  : %12s %10s\n",prt_name.Data(),prt_type.Data());
      Int_t  flag = 0;
      //___ Static Vector ___
      if(prt_type.CompareTo("STATIC",TString::kIgnoreCase)==0){
	for(int i=0;i<4;i++) sbuff[i] = fSu.PullStr(&Str_arg);
	TLorentzVector  v; 
	v.SetPxPyPzE(sbuff[0].Atof(),sbuff[1].Atof(),sbuff[2].Atof(),sbuff[3].Atof());
	AddVector(prt_name.Data(),v);
	flag = 1;
      }
      //___ prticle vector ___
      if(prt_type.CompareTo("PARTICLE",TString::kIgnoreCase)==0){
	TString prt_part = fSu.PullStr(&Str_arg);
	AddVector(prt_name.Data(), prt_part.Data());
	flag = 1;
      }
      //___ virtual Vector ____
      if(prt_type.CompareTo("VIRTUAL",TString::kIgnoreCase)==0){
	TString prt_oper   = fSu.PullStr(&Str_arg);
	int kkzz = 0;
	TString  h_op[10];
	for(int jj=0;jj<10;jj++) {
	  h_op[jj] = fSu.PullStr(&Str_arg);
	  if(h_op[jj].Length()>1) kkzz++;
	}
	//	TString prt_oper_1 = fSu.PullStr(&Str_arg);
	//	TString prt_oper_2 = fSu.PullStr(&Str_arg);
	AddVector(prt_name.Data(), prt_oper.Data(),kkzz,h_op);
	flag = 1;
      }
      

      if(flag==0){
	printf("vector/add/new (error): type %s is unknown \n",prt_type.Data());
	printf("syntax error in line : vector/add/new %s\n",Str_err.Data());
      }
    }
  }
  //___________________  Variable Commands _________________
  if(Str_sys.CompareTo("variable")==0){
    if(Str_cmd.CompareTo("add/new")==0){

      TString var_name = fSu.PullStr(&Str_arg);
      TString var_type = fSu.PullStr(&Str_arg);
      printf("variable/add/new: %12s %10s\n",var_name.Data(),var_type.Data());
      if(var_type.CompareTo("STATIC",TString::kIgnoreCase)==0){
	TString var_val = fSu.PullStr(&Str_arg);
	AddVariable(var_name.Data(),var_val.Atof());
      }

      if(var_type.CompareTo("VECTOR",TString::kIgnoreCase)==0){
	TString var_vec = fSu.PullStr(&Str_arg);
	TString var_nam = fSu.PullStr(&Str_arg);
	AddVariable(CTVAR_VECTOR,var_name.Data(),var_vec.Data(),var_nam.Data());
      }

      if(var_type.CompareTo("PARTICLE",TString::kIgnoreCase)==0){
	TString var_vec = fSu.PullStr(&Str_arg);
	TString var_nam = fSu.PullStr(&Str_arg);
	AddVariable(CTVAR_PARTICLE,var_name.Data(),var_vec.Data(),var_nam.Data());
      }

      if(var_type.CompareTo("VARIABLE",TString::kIgnoreCase)==0){
	TString prt_oper   = fSu.PullStr(&Str_arg);
	TString prt_oper_1 = fSu.PullStr(&Str_arg);
	TString prt_oper_2 = fSu.PullStr(&Str_arg);
	AddVariable(var_name.Data(),prt_oper.Data(),prt_oper_1.Data(),prt_oper_2.Data());
      }
      
    }
    
  }

}

//***************************************************************
//***************************************************************
//***************************************************************

TString   TCTEventSelector::GetBranchList()
{
  TString  fBR = 0;
  Int_t  nvar_cont = fVarArray->GetEntries();
  if(nvar_cont==0) return fBR;
  TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->At(0));
  fBR += Ptr_Variable->GetName();
  for(int iv = 1; iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->At(iv));
    fBR += ":"; fBR += Ptr_Variable->GetName();
  }
  return fBR;
}
//***************************************************************
//***************************************************************
//***************************************************************

void  TCTEventSelector::InitNtuple()
{
  fNT = new TNtuple("T","Created By Event Selector",GetBranchList().Data());
}


//***************************************************************
//***************************************************************
//***************************************************************

void  TCTEventSelector::FillNtuple()
{
  TArrayF  fbuff(5);
  GetNtupleBuff(&fbuff);
  fNT->Fill(fbuff.GetArray());
}
//***************************************************************
//***************************************************************
//***************************************************************

void  TCTEventSelector::GetNtupleBuff(TArrayF *fbuff)
{
  Int_t  nvar_cont = fVarArray->GetEntries();
  fbuff->Set(nvar_cont);
  for(int iv = 0; iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->At(iv));
    fbuff->AddAt((float) Ptr_Variable->Get(),iv);
  }
}
//***************************************************************
//***************************************************************
//***************************************************************
void     TCTEventSelector::LoadConfig(const char *fname)
{
  TCTStringUtils  fSu;
  TString         fStrBuff;
  TString         fSystem, fCmd, fArg,f1;
  TCTTextReader   fR;
  fR.Open(fname);
  while(fR.Next()>0){
    string  tline = fR.GetString();
    if(tline.c_str()[0]!='#'){
      fStrBuff = tline.c_str();
      fCmd = fSu.PullStr(&fStrBuff);
      fArg = fStrBuff;
      fSystem = fSu.PullStr(&fCmd,'/');
      //      printf("SYS (%s) CMD (%s) ARG (%s)\n",fSystem.Data(),fCmd.Data(),fArg.Data());
      ExecCommand(fSystem.Data(),fCmd.Data(),fArg.Data());
    }
  }
}
//***************************************************************
//***************************************************************
void     TCTEventSelector::Fill()
{

  //________ Fillinf Vector Arrays ___________________________
  Int_t  nvect_cont = fVectArray->GetEntries();
  for(int iv=0;iv<nvect_cont;iv++){
    TCTVector *Ptr_Vector = static_cast<TCTVector*> (fVectArray->At(iv));
    Ptr_Vector->Fill(fVectArray,"VECTOR");
  }
  //___________ Filling the Variable Arrays __________________
  Int_t  nvar_cont = fVarArray->GetEntries();
  for(int iv=0;iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->At(iv));
    Ptr_Variable->Fill(fVectArray,"VECTOR");
  }

  for(int iv=0;iv<nvar_cont;iv++){
    TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->At(iv));
    Ptr_Variable->Fill(fVarArray,"VARIABLE");
  }
}
//***************************************************************
//***************************************************************
//***************************************************************

double  TCTEventSelector::GetVariable(const char *name)
{
  TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->FindObject(name));
  if(Ptr_Variable==NULL){
    printf("WARRNING: Variable (%s) is not found\n",name);
    return 0.;
  }
  return Ptr_Variable->Get();
}
//***************************************************************
//***************************************************************
//***************************************************************

void     TCTEventSelector::SetVar(const char *name,double val)
{
 TCTVariable *Ptr_Variable = static_cast<TCTVariable*> (fVarArray->FindObject(name));
  if(Ptr_Variable==NULL){
    printf("WARRNING: Variable (%s) is not found\n",name);
    return;
  }
  return Ptr_Variable->Set(val);
}
//***************************************************************
//***************************************************************
//***************************************************************
void     TCTEventSelector::SetVect(const char *name,TLorentzVector vl)
{
  TCTVector *Ptr_Vect = static_cast<TCTVector*> (fVectArray->FindObject(name));
  if(Ptr_Vect==NULL){
    printf("WARRNING: Vector (%s) is not found\n",name);
    return;
  }
  return Ptr_Vect->Set(vl);
}
