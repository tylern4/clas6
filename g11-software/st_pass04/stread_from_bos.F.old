        subroutine stread_from_bos(OK)
c
c_begin_doc
c  RCS ID string
c  $Id: stread_from_bos.F,v 1.11 2003/02/25 21:40:45 pasyuk Exp $
c
c  Documentation for subroutine Stread_from_bos
c
c  Purpose: 
c  --------
c
c       Reads raw data from ST BOS bank and fills the StFastbus_data
c       common.
c
c  Input Parameters:  (Name - Type - Meaning)
c  ----------------
c
c  Output Parameters:  (Name - Type - Meaning)
c  -----------------
c
c  Other routines:
c  ---------------
c
c  Notes:
c  ------
c
c  Author: S.Taylor         Created:  Sat jun 11 14:07:15 EST 1997
c  -------
c
c  Major revisions:
c  ----------------    
c      - new format for ST bank   :Burin Mar98
c_end_doc
c
      IMPLICIT NONE
      SAVE
c
c_begin_inc
c  include files :
c  ---------------------
* 
c BOS common block  uncomment the next line for BOS include file
*      
#include "bcs.inc"
#include "st_general.PAR"
#include "sthit.CMN"
*
c_end_inc
c
c_begin_var
c  input/output variables:
c  -----------------------
*
*-OUTPUT
      LOGICAL OK                !success or failure
c
c  Local pre-defined variables:
c  ---------------------------
c  RCS information: 
      CHARACTER*132  CFILE, CREVIS, CSTATE, CDATE, CAUTHO, CRCSID
      PARAMETER (CFILE = '$rcsRCSfile$')
      PARAMETER (CREVIS = '$rcsRevision$')
      PARAMETER (CSTATE = '$rcsState$')
      PARAMETER (CDATE = '$rcsDate$')
      PARAMETER (CAUTHO = '$rcsAuthor$')
      DATA CRCSID/   
     1'$Id: stread_from_bos.F,v 1.11 2003/02/25 21:40:45 pasyuk Exp $'   
     2/   
c  Module information:
      CHARACTER*(*)  CRNAME, CRAUTH
      CHARACTER*100  CRMESS
      PARAMETER (CRNAME='STread_from_BOS')
      PARAMETER (CRAUTH='S.Taylor ')
c
c  Local User defined variables:
c  -----------------------------
c        
        integer size,size4,ifirst,ptemp
        integer pair_id,i,j,ndata
        data ifirst/0/
	integer idx
	integer name_i,mamind, sec(6),tdc(6),adc(6),dat(6) 
	
c_end_var
c
c
c  executable code for routine Stread_from_BOS:
c----6----------------------------------------------------------------72
*      
      StNHits=0
      ptemp = 0
      do i=1,6
         dat(i)=0
         tdc(i)=0
         adc(i)=0
         sec(i)=0
      enddo   

      if (ifirst.eq.0) then
        name_i = mamind(iw,'ST  ')
        if (name_i.eq.0) then
          CRMESS= 'NO ST BANK!'
	  call RECMES(CRNAME,'W',CRMESS)
          return
        endif
        ifirst = 1
      endif
      
      idx = iw(name_i)
      OK=idx.ne.0.
      if(.not.OK) then
c          CRMESS= 'NO DATA FOR START COUNTER!'
c	  call RECMES(CRNAME,'W',CRMESS)
          return
      endif
	
	size4=IW(idx)                       !size in [I*4] words
        size= 2*size4                       !size in [I*2] words
*
*-BOS only "knows" fullwords; odd number of half words were rounded up
*-(the remaining halfword is wasted)
*
        IF( MOD(size-1,StData_BOS_size).EQ.0 ) THEN
          size= size-1                      !BOS was forced to round up
        ENDIF
      
        OK= size.GE.StData_BOS_size .and. MOD(size,StData_BOS_size).EQ.0
        IF(.NOT.OK) THEN
c          crmess= ' malformed bank : '//StData_BOS_name
c          call RECMES(CRNAME,'W',CRMESS)
          RETURN
        ENDIF 	
	
	NDATA = size/StData_BOS_size
	do i = 1, NDATA
		j=(i-1)*StData_BOS_size
		sec(i) = iw16(2*idx+j+1)
		tdc(sec(i)) = iw16(2*idx+j+2)
		adc(sec(i)) = iw16(2*idx+j+3)
                if(tdc(sec(i)).lt.4095.and.tdc(sec(i)).gt.0) then
                   dat(sec(i)) = 1
                endif
	enddo
	
	do i = 1, 6
	   if(dat(i).eq.1) then
		pair_id = (i-1)/2 + 1
		if(ptemp.ne.pair_id) StNHits = StNHits + 1
		if(mod(i,2).eq.0) then
			StFastbus_data(pair_id,St_TDC2) = tdc(i)
			StFastbus_data(pair_id,St_ADC2) = adc(i)
		else
			StFastbus_data(pair_id,St_TDC1) = tdc(i)
			StFastbus_data(pair_id,St_ADC1) = adc(i)
		endif
		ptemp = pair_id
		StFoundHit(StNHits)=pair_id
	   endif	
	enddo
				
	return
	end		

