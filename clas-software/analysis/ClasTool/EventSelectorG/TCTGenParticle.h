// Autogenerated Class (Header File)
// Author : G.Gavalian
// Date   : Tue Nov  6 14:04:17 EST 2007
//

#ifndef __TCTGenParticle__
#define __TCTGenParticle__
#include <iostream>
#include <TROOT.h>
#include <TVector3.h>
#include <TObject.h>
#include <TLorentzVector.h>
#include <TGListTree.h>

class TCTGenParticle : public TNamed {

public:

  TLorentzVector  fPartVector;
  TVector3        fPartVertex;
  Double_t        fVertexDistance; // Distance from interaction point
  Double_t        fVectDoca; // If Particle is composite this is DOCA
  Double_t        fVectColliniarity; // If particle is composite this is coliniarity;
  Int_t           fPartStatus;
  // The Mass and PdgMass are different for composite particles
  // fPartMass will be current reconstructed mass and fPartPdgMass
  // will be pdg mass value

  Double_t        fPartMass;
  Double_t        fPartPdgMass;
  TString         fPartPdgName;
  Int_t           fPartPdgId;
  Int_t           fUsePDGMassFlag;

public:

  TCTGenParticle (const char *name);
  TCTGenParticle (const char *name,int type,double mass);
  TCTGenParticle (const char *name,const char *pdgname,int type,double mass);

~TCTGenParticle ();

 virtual  void  Reset();
 virtual  void  SetVector(TLorentzVector __vl){fPartVector = __vl;};
 virtual  void  SetVector3(TVector3      __vl){fPartVector.SetVectM(__vl,fPartPdgMass);};
 virtual  void  SetVertex(TVector3       __vl){fPartVertex = __vl;};
 virtual  void  SetMass(double __mass){fPartMass = __mass;};
 virtual  void  SetPdgId(int __pdgid){fPartPdgId = __pdgid;};
 virtual  void  SetStatus(int _status){fPartStatus = _status;};
 virtual  int   GetPdgId(){return fPartPdgId;};
 virtual  double GetMass(){return fPartMass;};
 virtual  double GetPdgMass(){return fPartPdgMass;};
 virtual  const char  *GetPdgName(){return fPartPdgName.Data();}; 
 virtual  void  Construct(TCTGenParticle *fPartBuff, Int_t n_part);
 virtual  void  SetInteractionVertex(TVector3 _iv);
 virtual  Int_t GetStatus(){return fPartStatus;};
 virtual  void  UsePdgMass(int _ktr=1){fUsePDGMassFlag = _ktr;};
 virtual  int   GetPdgMassFlag(){return fUsePDGMassFlag;};
 virtual  TLorentzVector  Vect(){return fPartVector;};
 virtual  TVector3        Vert(){return fPartVertex;};
 virtual  Double_t        Get(const char *system);

 virtual  TVector3 MatchTracks(TVector3 v1, TVector3 p1, 
				 TVector3 v2, TVector3 p2, Double_t *dist );

 virtual  void     Print();
 virtual  void     PrintVect();

ClassDef(TCTGenParticle,1)

};
#endif
