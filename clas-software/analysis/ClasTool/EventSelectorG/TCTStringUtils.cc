// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Sun Apr  1 20:42:16 EDT 2007
//

#include "TCTStringUtils.h"


TCTStringUtils::TCTStringUtils (){

}

TCTStringUtils::~TCTStringUtils (){

}

//-----------------
//-----------------
//-----------------


TString   TCTStringUtils::PullStr(TString *fstr, const char c )
{
  TString  strret;
  TString::EStripType s = TString::kBoth;

  (*fstr) = fstr->Strip(s,c);

  if(fstr->Length()==0){
    strret = "";
    return strret;
  }
  char  c_char_sep[3];
  sprintf(c_char_sep,"%c",c);
  int indx = fstr->Index(c_char_sep);

  if(fstr->Length()>0&&indx<0){
    strret = (*fstr);
    (*fstr) = "";
    return strret;
  }


  if(fstr->Data()[0]=='\''||fstr->Data()[0]=='\"'){
    char cc2[3];
    sprintf(cc2,"%c",fstr->Data()[0]);
    printf("string detected\n");
    int indx2 = fstr->Index(cc2,1,1,TString::kExact);
    printf("next one is at %d\n",indx2);
    if(indx2<1) {
      strret = "";
      printf("SYNTAX ERROR: unmatched commas \n line : %s\n",fstr->Data());
      (*fstr) = "";
      return strret;
      
    }
    
    TString  sb1 = GetSubstring((*fstr),1,indx2-2);
    TString  se1 = GetSubstring((*fstr),indx2+1,fstr->Length()-indx2-1);
    (*fstr) = se1.Data();
    return sb1;
    
  }
 
  TString  sbeg = GetSubstring((*fstr),0,indx-1);
  TString  send = GetSubstring((*fstr),indx+1,fstr->Length()-indx-1);
  (*fstr) = send.Data();
  
  return  sbeg;
}

void      TCTStringUtils::PushStr(TString pstr, TString *fstr, const char c)
{

}
int       TCTStringUtils::GetCount(TString _astr,char __crt)
{
  const char *_astr_ptr = _astr.Data();
  int  _t_count = 0;
  for(int ii=0;ii<_astr.Length();ii++){
    if(_astr_ptr[ii]==__crt) _t_count++;
  }
  return _t_count;
}
TString   TCTStringUtils::GetSubstring(TString  a, int start , int len)
{
  int   alen    = a.Length();
  //  const char *strbuff = a.Data();
  int   spos     = start;
  int   cpos     = 0;
  while(cpos<127&&spos<alen&&cpos<=len){
    cbuff[cpos] = a[spos];
    cpos++; spos++;
  }
  
  cbuff[cpos] = '\0';
  TString  bb = cbuff;
  return bb;
}

Int_t     TCTStringUtils::GetParNumber(const char *formula)
{
  TString aa = formula;
  int     idx,idxc;
  int     icnt = 0;
  idx = aa.Index("[",0);
  if(idx<0) return 0;
  idxc = aa.Index("]",idx);
  if(idxc<0) return 0;

  while(idx>=0){
    icnt++;
    idx = aa.Index("[",idx+1);
  }
  return icnt;
}
TString   TCTStringUtils::GetParName(const char *formula, int _idx)
{

  TString aa = formula;
  int     idx,idxc;
  int     icnt = 0;
  idx = aa.Index("[");
  while (icnt<_idx){
    icnt++;
    idx = aa.Index("[",idx+1);
  }
  idxc = aa.Index("]",idx+1);
  //  printf("start end = %d %d\n",idx,idxc);
  aa.Remove(idxc); 
  aa.Remove(0,idx+1);
  return aa;
}

Int_t     TCTStringUtils::GetParSign(const char *formula, int _idx)
{

  TString aa = formula;
  int     idx,idxc,sign=1;
  int     icnt = 0;
  idx = aa.Index("[");
  while (icnt<_idx){
    icnt++;
    idx = aa.Index("[",idx+1);
  }
  idxc = aa.Index("]",idx+1);
  if(idx==0) return +1;
  aa.Remove(idx);
  aa.Remove(0,idx-1);
  if(aa.CompareTo("-")==0) sign = -1;
  //  printf("Sign = %s\n",aa.Data());
  return sign;
}
Int_t     TCTStringUtils::GetNTokens(const char cr)
{
  
  return 1;
}
TString   TCTStringUtils::GetToken(const char *str,int idx,const char cr)
{
  s_buff = str;
  int s_idx = 0;
  int e_idx;
  for(int i=0;i<idx;i++){
    s_idx = s_buff.Index(cr,s_idx)+1;
  }

  if(s_idx<0) {
    s_buff = "";
  } else {
    s_buff.Remove(0,s_idx);
    e_idx = s_buff.Index(cr);
    if(e_idx>0)
      s_buff.Remove(e_idx,s_buff.Length()-e_idx);
  }

  return s_buff;
}
TString   TCTStringUtils::ChangeExtension(TString path, const char *__ext,const char *__next)
{
  TString  res = path;
  int  _ext_len = strlen(__ext);
  int  _idx     = res.Index(__ext);
  if(_idx>2){
    res.Replace(_idx,_ext_len,__next);
  }
  return res;
}
