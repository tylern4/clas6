// Autogenerated Class (Source File)
// Author : G.Gavalian
// Date   : Tue Mar 27 16:46:05 EST 2007
//

#include "TCTVariable.h"
#include "TCTVector.h"
#include "TCTParticle.h"


ClassImp(TCTVariable)



TCTVariable::TCTVariable (const char *name, double value)
{
  fVarType  = CTVAR_STATIC;
  fVarValue = value;
  SetName(name);
}

TCTVariable::TCTVariable (const char *name, const char *sys_name, const char *sys_var, int type)
{
  SetName(name);
  fSystemName = sys_name;
  fSystemVar  = sys_var;
  fVarType    = type;
}

TCTVariable::TCTVariable (const char *name, const char *oper, const char *var_1, const char *var_2)
{
  SetName(name);
  fVarType   = CTVAR_VARIABLE;
  fOperation = oper;
  fOperand_1 = var_1;
  fOperand_2 = var_2;
}

TCTVariable::~TCTVariable (){

}

//-----------------
//-----------------
//-----------------

void  TCTVariable::Fill(TObjArray *farr, const char *system)
{
  if(fVarType==CTVAR_STATIC) return;
  TString  fsys = system;

  //_____  PARTICLE variable _________________
  if(fsys.CompareTo("PARTICLE")==0&&fVarType==CTVAR_PARTICLE){
    TCTParticle *fptr = static_cast<TCTParticle*> (farr->FindObject(fSystemName.Data()));
    if(fptr==NULL){
      fVarValue = 0.;
    } else {
      fVarValue = fptr->Get(fSystemVar.Data());
    }
  }
  //______ Vector Variable _________________
  if(fsys.CompareTo("VECTOR")==0&&fVarType==CTVAR_VECTOR){
    TCTVector *fptr = static_cast<TCTVector*> (farr->FindObject(fSystemName.Data()));
    if(fptr==NULL){
      printf("ERROR:CTVariable::Fill():: The vector (%s) can not be found\n",fSystemName.Data());
      fVarValue = -2450.;
    } else {
      fVarValue = fptr->Get(fSystemVar.Data());
    }
  }
  //_______ Variable Variable ______________
  if(fsys.CompareTo("VARIABLE")==0&&fVarType==CTVAR_VARIABLE){
    TCTVariable *fptr_1 = static_cast<TCTVariable*> (farr->FindObject(fOperand_1.Data()));
    TCTVariable *fptr_2 = static_cast<TCTVariable*> (farr->FindObject(fOperand_2.Data()));
    if(fptr_1!=NULL&&fptr_2!=NULL){
      DoOperation(fptr_1->Get(),fptr_2->Get());
    } else {
      fVarValue = -1000.;
    }
  }
}

void      TCTVariable::Print()
{

  if(fVarType==CTVAR_STATIC){
    printf("[%12s] | [%9.5f]\n",GetName(),fVarValue);
  }
  if(fVarType==CTVAR_PARTICLE){
    printf("[%12s] | [%12s] => [%12s]\n",GetName(),fSystemName.Data(),fSystemVar.Data());
  }
  if(fVarType==CTVAR_VECTOR){
    printf("[%12s] | [%12s] => [%12s] = %9.5f\n",GetName(),fSystemName.Data(),fSystemVar.Data(),fVarValue);
  }
  if(fVarType==CTVAR_VARIABLE){
    printf("[%12s] | [%12s] (%6s)  [%12s]  = %9.5f\n",GetName(),fOperand_1.Data(),
	   fOperation.Data(),fOperand_2.Data(),fVarValue);
  }
  
  
}

void      TCTVariable::DoOperation(double v1,double v2)
{
  if(fOperation.CompareTo("add")  ==0) fVarValue = v1 + v2;
  if(fOperation.CompareTo("sub")  ==0) fVarValue = v1 - v2;
}
